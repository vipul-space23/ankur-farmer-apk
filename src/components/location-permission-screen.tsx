import React, { useState } from "react";
import {
  MapPin,
  Navigation,
  Compass,
  CloudRain,
  TrendingUp,
  Wheat,
  Globe,
  ChevronDown,
} from "lucide-react";
import { Language } from "../App";
import { SimpleButton } from "./simple-button";

interface LocationPermissionScreenProps {
  language: Language | null;
  onLocationAllow: () => void;
  onLocationSkip: () => void;
  onLanguageChange: (language: Language) => void;
}

const locationContent = {
  en: {
    title: "Enable Location Access",
    allowButton: "Allow Location Access",
    skipButton: "Maybe Later",
    privacy: "Your location data is kept private and secure",
  },
  hi: {
    title: "‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•Ä ‡§™‡§π‡•Å‡§Ç‡§ö ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç",
    allowButton: "‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•Ä ‡§™‡§π‡•Å‡§Ç‡§ö ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç",
    skipButton: "‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç",
    privacy: "‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§°‡•á‡§ü‡§æ ‡§®‡§ø‡§ú‡•Ä ‡§î‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à",
  },
  ta: {
    title: "‡Æá‡Æü‡ÆÆ‡Øç ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æ≤‡Øà ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
    allowButton: "‡Æá‡Æü‡ÆÆ‡Øç ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æ≤‡Øà ‡ÆÖ‡Æ©‡ØÅ‡ÆÆ‡Æ§‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
    skipButton: "‡Æ™‡Æø‡Æ©‡Øç‡Æ©‡Æ∞‡Øç",
    privacy:
      "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æü ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æ§‡Æ©‡Æø‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Ææ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Øà‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ",
  },
  te: {
    title: "‡∞∏‡±ç‡∞•‡∞æ‡∞® ‡∞™‡±ç‡∞∞‡∞µ‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    allowButton: "‡∞∏‡±ç‡∞•‡∞æ‡∞® ‡∞™‡±ç‡∞∞‡∞µ‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    skipButton: "‡∞§‡∞∞‡±Å‡∞µ‡∞æ‡∞§",
    privacy:
      "‡∞Æ‡±Ä ‡∞∏‡±ç‡∞•‡∞æ‡∞® ‡∞°‡±á‡∞ü‡∞æ ‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡∞ø‡∞ó‡∞§‡∞Ç‡∞ó‡∞æ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡±Å‡∞∞‡∞ï‡±ç‡∞∑‡∞ø‡∞§‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞ö‡∞¨‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø",
  },
  bn: {
    title: "‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®",
    allowButton: "‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶®",
    skipButton: "‡¶™‡¶∞‡ßá",
    privacy:
      "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶Ø‡¶º",
  },
  mr: {
    title: "‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡§æ",
    allowButton: "‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡•ç‡§∞‡§µ‡•á‡§∂‡§æ‡§∏ ‡§™‡§∞‡§µ‡§æ‡§®‡§ó‡•Ä ‡§¶‡•ç‡§Ø‡§æ",
    skipButton: "‡§®‡§Ç‡§§‡§∞",
    privacy: "‡§§‡•Å‡§Æ‡§ö‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§°‡•á‡§ü‡§æ ‡§ñ‡§æ‡§ú‡§ó‡•Ä ‡§Ü‡§£‡§ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§†‡•á‡§µ‡§≤‡§æ ‡§ú‡§æ‡§§‡•ã",
  },
  gu: {
    title: "‡™∏‡´ç‡™•‡™æ‡™® ‡™ç‡™ï‡´ç‡™∏‡´á‡™∏ ‡™∏‡™ï‡´ç‡™∑‡™Æ ‡™ï‡™∞‡´ã",
    allowButton: "‡™∏‡´ç‡™•‡™æ‡™® ‡™ç‡™ï‡´ç‡™∏‡´á‡™∏‡™®‡´Ä ‡™Æ‡™Ç‡™ú‡´Ç‡™∞‡´Ä ‡™Ü‡™™‡´ã",
    skipButton: "‡™™‡™õ‡´Ä‡™•‡´Ä",
    privacy:
      "‡™§‡™Æ‡™æ‡™∞‡´ã ‡™∏‡´ç‡™•‡™æ‡™® ‡™°‡´á‡™ü‡™æ ‡™ñ‡™æ‡™®‡™ó‡´Ä ‡™Ö‡™®‡´á ‡™∏‡´Å‡™∞‡™ï‡´ç‡™∑‡™ø‡™§ ‡™∞‡™æ‡™ñ‡™µ‡™æ‡™Æ‡™æ‡™Ç ‡™Ü‡™µ‡´á ‡™õ‡´á",
  },
  kn: {
    title: "‡≤∏‡≥ç‡≤•‡≤æ‡≤® ‡≤™‡≥ç‡≤∞‡≤µ‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø",
    allowButton: "‡≤∏‡≥ç‡≤•‡≤æ‡≤® ‡≤™‡≥ç‡≤∞‡≤µ‡≥á‡≤∂‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤Ö‡≤®‡≥Å‡≤Æ‡≤§‡≤ø ‡≤®‡≥Ä‡≤°‡≤ø",
    skipButton: "‡≤®‡≤Ç‡≤§‡≤∞",
    privacy:
      "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≥ç‡≤•‡≤æ‡≤® ‡≤°‡≥á‡≤ü‡≤æ‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ñ‡≤æ‡≤∏‡≤ó‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥Å‡≤∞‡≤ï‡≥ç‡≤∑‡≤ø‡≤§‡≤µ‡≤æ‡≤ó‡≤ø ‡≤á‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü",
  },
  ml: {
    title: "‡¥∏‡µç‡¥•‡¥æ‡¥® ‡¥Ü‡¥ï‡µç‚Äå‡¥∏‡¥∏‡µç ‡¥™‡µç‡¥∞‡¥µ‡µº‡¥§‡µç‡¥§‡¥®‡¥ï‡µç‡¥∑‡¥Æ‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï",
    allowButton: "‡¥∏‡µç‡¥•‡¥æ‡¥® ‡¥Ü‡¥ï‡µç‚Äå‡¥∏‡¥∏‡¥ø‡¥®‡µç ‡¥Ö‡¥®‡µÅ‡¥Æ‡¥§‡¥ø ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï",
    skipButton: "‡¥™‡¥ø‡¥®‡µç‡¥®‡µÄ‡¥ü‡µç",
    privacy:
      "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥∏‡µç‡¥•‡¥æ‡¥® ‡¥°‡¥æ‡¥±‡µç‡¥± ‡¥∏‡µç‡¥µ‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥µ‡µÅ‡¥Ç ‡¥∏‡µÅ‡¥∞‡¥ï‡µç‡¥∑‡¥ø‡¥§‡¥µ‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥∏‡µÇ‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ",
  },
  pa: {
    title: "‡®∏‡®•‡®æ‡®® ‡®™‡®π‡©Å‡©∞‡®ö ‡®Ø‡©ã‡®ó ‡®¨‡®£‡®æ‡®ì",
    allowButton: "‡®∏‡®•‡®æ‡®® ‡®™‡®π‡©Å‡©∞‡®ö ‡®¶‡©Ä ‡®á‡®ú‡®æ‡®ú‡®º‡®§ ‡®¶‡®ø‡®ì",
    skipButton: "‡®¨‡®æ‡®Ö‡®¶ ‡®µ‡®ø‡©±‡®ö",
    privacy:
      "‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®∏‡®•‡®æ‡®® ‡®°‡®æ‡®ü‡®æ ‡®®‡®ø‡©±‡®ú‡©Ä ‡®Ö‡®§‡©á ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ö‡®§ ‡®∞‡©±‡®ñ‡®ø‡®Ü ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à",
  },
  ur: {
    title: "ŸÖŸÇÿßŸÖ ⁄©€å ÿ±ÿ≥ÿßÿ¶€å ŸÅÿπÿßŸÑ ⁄©ÿ±€å⁄∫",
    allowButton: "ŸÖŸÇÿßŸÖ ⁄©€å ÿ±ÿ≥ÿßÿ¶€å ⁄©€å ÿßÿ¨ÿßÿ≤ÿ™ ÿØ€å⁄∫",
    skipButton: "ÿ®ÿπÿØ ŸÖ€å⁄∫",
    privacy: "ÿ¢Ÿæ ⁄©ÿß ŸÖŸÇÿßŸÖ ⁄à€åŸπÿß ŸÜÿ¨€å ÿßŸàÿ± ŸÖÿ≠ŸÅŸàÿ∏ ÿ±⁄©⁄æÿß ÿ¨ÿßÿ™ÿß €Å€í",
  },
  as: {
    title: "‡¶Ö‡ß±‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡ßç‡ß∞‡ß±‡ßá‡¶∂‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡ß∞ ‡¶∏‡¶ï‡ßç‡ß∞‡¶ø‡¶Ø‡¶º ‡¶ï‡ß∞‡¶ï",
    allowButton: "‡¶Ö‡ß±‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡ßç‡ß∞‡ß±‡ßá‡¶∂‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡ß∞‡ß∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶Ø‡¶º‡¶ï",
    skipButton: "‡¶™‡¶ø‡¶õ‡¶§",
    privacy:
      "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶Ö‡ß±‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ß∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶Ü‡ß∞‡ßÅ ‡¶∏‡ßÅ‡ß∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡ß∞‡¶ñ‡¶æ ‡¶π‡¶Ø‡¶º",
  },
  or: {
    title: "‡¨∏‡≠ç‡¨•‡¨æ‡¨® ‡¨™‡≠ç‡¨∞‡¨¨‡≠á‡¨∂‡¨æ‡¨ß‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨∏‡¨ï‡≠ç‡¨∞‡¨ø‡≠ü ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
    allowButton: "‡¨∏‡≠ç‡¨•‡¨æ‡¨® ‡¨™‡≠ç‡¨∞‡¨¨‡≠á‡¨∂‡¨æ‡¨ß‡¨ø‡¨ï‡¨æ‡¨∞‡¨∞ ‡¨Ö‡¨®‡≠Å‡¨Æ‡¨§‡¨ø ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å",
    skipButton: "‡¨™‡¨∞‡≠á",
    privacy: "‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨∏‡≠ç‡¨•‡¨æ‡¨® ‡¨§‡¨•‡≠ç‡≠ü ‡¨¨‡≠ç‡≠ü‡¨ï‡≠ç‡¨§‡¨ø‡¨ó‡¨§ ‡¨è‡¨¨‡¨Ç ‡¨∏‡≠Å‡¨∞‡¨ï‡≠ç‡¨∑‡¨ø‡¨§ ‡¨∞‡¨ñ‡¨æ‡¨Ø‡¨æ‡¨è",
  },
};

const availableLanguages: Language[] = [
  {
    code: "en",
    name: "English",
    nativeName: "English",
    flag: "üáÆüá≥",
  },
  {
    code: "hi",
    name: "Hindi",
    nativeName: "‡§π‡§ø‡§Ç‡§¶‡•Ä",
    flag: "üáÆüá≥",
  },
  {
    code: "ta",
    name: "Tamil",
    nativeName: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç",
    flag: "üáÆüá≥",
  },
  {
    code: "te",
    name: "Telugu",
    nativeName: "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å",
    flag: "üáÆüá≥",
  },
  {
    code: "bn",
    name: "Bengali",
    nativeName: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ",
    flag: "üáÆüá≥",
  },
  {
    code: "mr",
    name: "Marathi",
    nativeName: "‡§Æ‡§∞‡§æ‡§†‡•Ä",
    flag: "üáÆüá≥",
  },
  {
    code: "gu",
    name: "Gujarati",
    nativeName: "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä",
    flag: "üáÆüá≥",
  },
  {
    code: "kn",
    name: "Kannada",
    nativeName: "‡≤ï‡≤®‡≥ç‡≤®‡≤°",
    flag: "üáÆüá≥",
  },
  {
    code: "ml",
    name: "Malayalam",
    nativeName: "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç",
    flag: "üáÆüá≥",
  },
  {
    code: "pa",
    name: "Punjabi",
    nativeName: "‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä",
    flag: "üáÆüá≥",
  },
  { code: "ur", name: "Urdu", nativeName: "ÿßÿ±ÿØŸà", flag: "üáÆüá≥" },
  {
    code: "as",
    name: "Assamese",
    nativeName: "‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ",
    flag: "üáÆüá≥",
  },
  { code: "or", name: "Odia", nativeName: "‡¨ì‡¨°‡¨º‡¨ø‡¨Ü", flag: "üáÆüá≥" },
];

export function LocationPermissionScreen({
  language,
  onLocationAllow,
  onLocationSkip,
  onLanguageChange,
}: LocationPermissionScreenProps) {
  const [isLanguageOpen, setIsLanguageOpen] = useState(false);
  const langCode = language?.code || "en";
  const content =
    locationContent[langCode as keyof typeof locationContent] ||
    locationContent.en;

  const handleLocationRequest = () => {
    // In a real app, you would request location permission here
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log("Location granted:", position.coords);
          onLocationAllow();
        },
        (error) => {
          console.log("Location denied:", error);
          onLocationAllow(); // Still proceed even if denied
        },
      );
    } else {
      console.log("Geolocation not supported");
      onLocationAllow(); // Still proceed
    }
  };

  const handleLanguageSelect = (selectedLang: Language) => {
    onLanguageChange(selectedLang);
    setIsLanguageOpen(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-white flex flex-col">
      {/* Simple Language Selector - Positioned at top right */}
      <div className="absolute top-6 right-6 z-20">
        <div className="relative">
          <SimpleButton
            onClick={() => setIsLanguageOpen(!isLanguageOpen)}
            variant="ghost"
            className="text-green-600 hover:bg-green-100 flex items-center space-x-1 px-3 py-2 rounded-lg bg-white shadow-sm"
          >
            <Globe className="w-4 h-4" />
            <span className="text-sm">
              {language?.flag || "üåê"}
            </span>
            <ChevronDown className="w-3 h-3" />
          </SimpleButton>

          {isLanguageOpen && (
            <>
              {/* Backdrop */}
              <div
                className="fixed inset-0 z-40"
                onClick={() => setIsLanguageOpen(false)}
              />

              {/* Dropdown */}
              <div className="absolute right-0 top-full mt-2 w-48 bg-white rounded-lg shadow-lg border z-50 max-h-60 overflow-y-auto">
                <div className="p-2">
                  {availableLanguages.map((lang) => (
                    <button
                      key={lang.code}
                      onClick={() => handleLanguageSelect(lang)}
                      className={`w-full text-left px-3 py-2 rounded-md text-sm hover:bg-gray-100 flex items-center space-x-2 ${
                        language?.code === lang.code
                          ? "bg-green-50 text-green-700"
                          : "text-gray-700"
                      }`}
                    >
                      <span className="text-base">
                        {lang.flag}
                      </span>
                      <div className="flex-1 min-w-0">
                        <div className="font-medium truncate text-xs">
                          {lang.nativeName}
                        </div>
                      </div>
                      {language?.code === lang.code && (
                        <div className="w-2 h-2 bg-green-500 rounded-full flex-shrink-0"></div>
                      )}
                    </button>
                  ))}
                </div>
              </div>
            </>
          )}
        </div>
      </div>

      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-4 -right-4 w-24 h-24 bg-green-100 rounded-full opacity-60 animate-pulse"></div>
        <div className="absolute top-1/4 -left-8 w-16 h-16 bg-green-200 rounded-full opacity-40 animate-pulse delay-300"></div>
        <div className="absolute bottom-1/4 right-8 w-20 h-20 bg-green-150 rounded-full opacity-50 animate-pulse delay-700"></div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col items-center justify-center p-8 relative z-10">
        {/* Location Icon with Animation */}
        <div className="mb-12 relative">
          <div className="w-32 h-32 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center shadow-lg agricultural-shadow">
            <MapPin className="w-16 h-16 text-white" />
          </div>

          {/* Animated Pulse Rings */}
          <div className="absolute inset-0 w-32 h-32 rounded-full border-4 border-green-300 opacity-20 animate-ping"></div>
          <div className="absolute inset-2 w-28 h-28 rounded-full border-2 border-green-400 opacity-30 animate-ping delay-150"></div>
        </div>

        {/* Title */}
        <div className="text-center mb-12">
          <h1 className="text-3xl font-bold text-gray-800">
            {content.title}
          </h1>
        </div>

        {/* Action Buttons */}
        <div className="space-y-4 w-full max-w-xs">
          <SimpleButton
            onClick={handleLocationRequest}
            className="w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-xl font-medium text-lg agricultural-shadow transform hover:scale-105 transition-all duration-200"
          >
            <MapPin className="w-5 h-5 mr-2" />
            {content.allowButton}
          </SimpleButton>

          <SimpleButton
            onClick={onLocationSkip}
            variant="ghost"
            className="w-full text-gray-600 hover:text-gray-800 py-3 font-medium"
          >
            {content.skipButton}
          </SimpleButton>
        </div>

        {/* Privacy Notice */}
        <div className="mt-8 text-center">
          <p className="text-xs text-gray-500 flex items-center justify-center">
            <Compass className="w-4 h-4 mr-1" />
            {content.privacy}
          </p>
        </div>
      </div>

      {/* Bottom Decorative Element */}
      <div className="h-20 bg-gradient-to-t from-green-100 to-transparent relative">
        <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-1 bg-green-300 rounded-full"></div>
      </div>
    </div>
  );
}