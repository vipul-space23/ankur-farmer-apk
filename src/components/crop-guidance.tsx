import React, { useState, forwardRef } from 'react';
import { 
  ArrowLeft, 
  Sprout, 
  Calendar, 
  TrendingUp, 
  DollarSign,
  Beaker,
  Clock,
  Droplets,
  Shield,
  RotateCcw,
  Sun,
  ChevronRight,
  BookOpen,
  Bug,
  Biohazard,
  Tractor,
  CheckCircle2,
  Warehouse, // Added for new component
  Cloudy, // Added for new component
  CloudRain, // Added for new component
  Wind, // Added for new component
  Globe,
} from 'lucide-react';

// --- START: Self-Contained Component Definitions ---
// At the top of crop-guidance.tsx
import { Screen, Language } from '../App'; // <-- ADD Language HERE 


const SimpleButton = forwardRef<
  HTMLButtonElement,
  React.ButtonHTMLAttributes<HTMLButtonElement> & { variant?: 'outline' | 'ghost' | 'default'; size?: 'icon' | 'default' }
>(({ className, variant = 'default', size = 'default', ...props }, ref) => {
  const baseClasses = `inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none`;
  
  const variantClasses = {
    default: 'bg-green-600 text-white hover:bg-green-700',
    outline: 'border border-gray-200 bg-transparent hover:bg-gray-50 text-gray-800',
    ghost: 'hover:bg-green-100 hover:text-green-800',
  };

  const sizeClasses = {
    default: 'h-10 py-2 px-4',
    icon: 'h-10 w-10',
  };
  
  return (
    <button
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}
      ref={ref}
      {...props}
    />
  );
});
SimpleButton.displayName = 'SimpleButton';

const LanguageSelector = ({ selectedLanguage, onLanguageChange, variant }: { selectedLanguage: Language | null; onLanguageChange: (language: Language) => void; variant?: string; }) => {
    const languages: Language[] = [
        { code: 'en', name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
        { code: 'hi', name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    ];

    const toggleLanguage = () => {
        const currentLangCode = selectedLanguage?.code || 'en';
        const nextLanguage = currentLangCode === 'en' ? languages[1] : languages[0];
        onLanguageChange(nextLanguage);
    };
    
    const otherLanguage = selectedLanguage?.code === 'en' ? languages[1] : languages[0];

    const buttonClasses = variant === 'header' 
        ? "flex items-center space-x-2 text-white bg-white/20 hover:bg-white/30 px-3 py-2 rounded-full"
        : "text-gray-700 bg-gray-100 hover:bg-gray-200";

    return (
        <button 
            onClick={toggleLanguage}
            className={`transition-colors ${buttonClasses}`}
        >
             {variant === 'header' ? (
                <>
                    <Globe className="w-4 h-4" />
                    <span className="text-sm font-semibold">{otherLanguage.code.toUpperCase()}</span>
                </>
             ) : (
                `Switch to ${otherLanguage.name}`
             )}
        </button>
    );
};

const ImageWithFallback = ({ src, alt, className }: { src: string; alt: string; className: string; }) => {
    const [imgSrc, setImgSrc] = useState(src);
    const handleError = () => setImgSrc(`https://placehold.co/100x100/e2e8f0/4a5568?text=Image`);
    return <img src={imgSrc} alt={alt} className={className} onError={handleError} />;
};
// --- END: Self-Contained Definitions ---


interface CropGuidanceProps {
  selectedLanguage: Language | null;
  onNavigate: (screen: Screen, ...args: any[]) => void;
  onLanguageChange: (language: Language) => void;
}

const guidanceContent = {
  en: {
    title: "Crop Guidance",
    subtitle: "Smart farming recommendations",
    cropSuggestions: "Crop Suggestions",
    yieldEstimate: "Yield Estimate",
    profitability: "Profitability",
    sowingCalendar: "Sowing & Harvest Calendar",
    cropRotation: "Crop Rotation Advice",
    fertilizerGuidance: "Fertilizer Guidance",
    recommendedCrops: "Recommended Crops for Your Soil",
    currentSeason: "Current Season",
    nextSeason: "Next Season",
    highProfit: "High Profit",
    mediumProfit: "Medium Profit",
    lowProfit: "Low Profit",
    sowingTime: "Best Sowing Time",
    harvestTime: "Expected Harvest",
    fertilizerSchedule: "Fertilizer Schedule",
    kharif: "Kharif",
    rabi: "Rabi",
    summer: "Summer",
    cropForSeason: "Crop for season:",
    benefit: "Benefit:",
    rice: "Rice",
    wheat: "Wheat",
    legumes: "Legumes",
    soybean: "Soybean", 
    cotton: "Cotton",
    sugarcane: "Sugarcane",

    cropRotationDetailsTitle: "Why Crop Rotation Matters",
    soilHealthBenefitTitle: "Improves Soil Health",
    soilHealthBenefitDesc: "Alternating deep and shallow-rooted plants improves soil structure and fertility.",
    pestManagementBenefitTitle: "Pest & Disease Control",
    pestManagementBenefitDesc: "Breaks the life cycles of pests and diseases that are specific to one crop family.",
    nutrientBenefitTitle: "Enhanced Nutrient Use",
    nutrientBenefitDesc: "Legumes fix nitrogen, and subsequent crops can utilize residual nutrients, reducing fertilizer needs.",
    
    riceBenefit1: "High water requirement aligns perfectly with the monsoon season.",
    riceBenefit2: "Breaks the cycle for weeds and pests common in dryland crops.",
    wheatBenefit1: "Effectively utilizes residual soil moisture and nutrients from the Kharif season.",
    wheatBenefit2: "Its different root structure helps to improve soil aeration.",
    legumesBenefit1: "Adds atmospheric nitrogen to the soil, naturally enriching it for the next crop.",
    legumesBenefit2: "Acts as a green manure, improving organic matter and overall soil health.",
    
    cropEncyclopedia: "Crop Encyclopedia",
    soilPreparation: "Soil Preparation",
    commonDiseases: "Common Diseases",
    pestControl: "Pest Control",
    harvesting: "Harvesting & Storage",

    riceSoilPrep: "Puddle the field by plowing 2-3 times in standing water to create a fine, soft seedbed. Ensure the field is level for uniform water distribution.",
    riceDiseases: "Blast (Pyricularia oryzae) and Bacterial Blight (Xanthomonas oryzae). Use resistant varieties and apply recommended fungicides.",
    ricePestControl: "Stem borer and leaf folder are common pests. Use pheromone traps and apply insecticides like cartap hydrochloride as needed.",
    riceHarvesting: "Harvest when grains in the panicle are 80-85% ripe. Dry the grains immediately to 12-14% moisture content for safe storage.",
    
    wheatSoilPrep: "A well-pulverized but compact seedbed is required for good germination. Prepare the field by giving 2-3 plowings followed by harrowing.",
    wheatDiseases: "Rust (Puccinia spp.) and Smut. Use certified, disease-resistant seeds and consider seed treatment with fungicides.",
    wheatPestControl: "Aphids can be a major issue. Spraying with a systemic insecticide like imidacloprid can be effective.",
    wheatHarvesting: "Harvest when the straw becomes dry and brittle and the grains are hard. Thresh and store in a cool, dry place.",

    soybeanSoilPrep: "Requires a well-drained loamy soil. One deep ploughing followed by 2-3 harrowings is sufficient to get a fine tilth.",
    soybeanDiseases: "Mosaic virus and rust. Control vector insects and use resistant varieties. Remove and destroy infected plants.",
    soybeanPestControl: "Girdle beetle and leaf miners are major pests. Timely spraying of quinalphos or chlorpyrifos can manage infestations.",
    soybeanHarvesting: "Harvest when the leaves turn yellow and drop, and pods are dry. Over-drying can cause shattering losses.",

    cottonSoilPrep: "Deep plowing is essential for good root development. Prepare raised beds to ensure good drainage and aeration.",
    cottonDiseases: "Boll rot and leaf curl virus are major concerns. Use disease-resistant hybrids and manage whitefly populations.",
    cottonPestControl: "Bollworms (pink, spotted) are the most destructive. Use pheromone traps for monitoring and integrated pest management (IPM) strategies.",
    cottonHarvesting: "Pick cotton from fully burst bolls during dry weather. Avoid picking wet cotton to maintain quality.",

    sugarcaneSoilPrep: "Requires deep tillage and well-prepared trenches or ridges for planting setts. Ensure adequate organic manure application.",
    sugarcaneDiseases: "Red Rot is a major disease. Use certified disease-free setts and practice crop rotation to manage soil-borne pathogens.",
    sugarcanePestControl: "Early shoot borer and termites can cause significant damage. Apply recommended soil insecticides at the time of planting.",
    sugarcaneHarvesting: "Harvest when the cane has reached peak maturity, indicated by sucrose content. Cut the cane close to the ground level.",

    harvestPlanner: {
      title: "Harvest & Storage Planner",
      selectCrop: "Select a Crop",
      selectSowingDate: "Select Sowing Date",
      forecastButton: "Forecast Harvest",
      harvestWindow: "Predicted Harvest Window",
      dailyForecast: "Daily Forecast",
      optimalDay: "Optimal Day",
      postHarvestTips: "Post-Harvest Tips",
      tipRice: "Dry grains immediately to 12-14% moisture to prevent spoilage.",
      tipWheat: "Store in clean, dry jute bags and stack them on wooden planks.",
      tipSoybean: "Avoid storing near inputs like fertilizers to prevent contamination.",
      tipCotton: "Store seed cotton (kapas) in a dry, clean place before ginning. Do not store for long periods.",
      tipSugarcane: "Crush the cane as soon as possible after harvesting (ideally within 24 hours) to prevent sucrose loss.",
    }
  },
  hi: {
    title: "‡§´‡§∏‡§≤ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®",
    subtitle: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•É‡§∑‡§ø ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç",
    cropSuggestions: "‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ",
    yieldEstimate: "‡§â‡§™‡§ú ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®",
    profitability: "‡§≤‡§æ‡§≠‡§™‡•ç‡§∞‡§¶‡§§‡§æ",
    sowingCalendar: "‡§¨‡•Å‡§Ü‡§à ‡§î‡§∞ ‡§ï‡§ü‡§æ‡§à ‡§ï‡•à‡§≤‡•á‡§Ç‡§°‡§∞",
    cropRotation: "‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§∏‡§≤‡§æ‡§π",
    fertilizerGuidance: "‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®",
    recommendedCrops: "‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤‡•á‡§Ç",
    currentSeason: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•Ä‡§ú‡§®",
    nextSeason: "‡§Ö‡§ó‡§≤‡§æ ‡§∏‡•Ä‡§ú‡§®",
    highProfit: "‡§â‡§ö‡•ç‡§ö ‡§≤‡§æ‡§≠",
    mediumProfit: "‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§≤‡§æ‡§≠",
    lowProfit: "‡§ï‡§Æ ‡§≤‡§æ‡§≠",
    sowingTime: "‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§¨‡•Å‡§Ü‡§à ‡§∏‡§Æ‡§Ø",
    harvestTime: "‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§ü‡§æ‡§à",
    fertilizerSchedule: "‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ",
    kharif: "‡§ñ‡§∞‡•Ä‡§´",
    rabi: "‡§∞‡§¨‡•Ä",
    summer: "‡§ó‡§∞‡•ç‡§Æ‡•Ä",
    cropForSeason: "‡§á‡§∏ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§∏‡§≤:",
    benefit: "‡§≤‡§æ‡§≠:",
    rice: "‡§ö‡§æ‡§µ‡§≤",
    wheat: "‡§ó‡•á‡§π‡•Ç‡§Ç",
    legumes: "‡§´‡§≤‡§ø‡§Ø‡§æ‡§Ç",
    soybean: "‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®",
    cotton: "‡§ï‡§™‡§æ‡§∏",
    sugarcane: "‡§ó‡§®‡•ç‡§®‡§æ",
    
    cropRotationDetailsTitle: "‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à",
    soilHealthBenefitTitle: "‡§Æ‡•É‡§¶‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞",
    soilHealthBenefitDesc: "‡§ó‡§π‡§∞‡•Ä ‡§î‡§∞ ‡§â‡§•‡§≤‡•Ä ‡§ú‡§°‡§º‡•ã‡§Ç ‡§µ‡§æ‡§≤‡•á ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•ã ‡§¨‡§æ‡§∞‡•Ä-‡§¨‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§≤‡§ó‡§æ‡§®‡•á ‡§∏‡•á ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§î‡§∞ ‡§â‡§∞‡•ç‡§µ‡§∞‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§",
    pestManagementBenefitTitle: "‡§ï‡•Ä‡§ü ‡§î‡§∞ ‡§∞‡•ã‡§ó ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£",
    pestManagementBenefitDesc: "‡§Ø‡§π ‡§è‡§ï ‡§π‡•Ä ‡§´‡§∏‡§≤ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§î‡§∞ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§ú‡•Ä‡§µ‡§® ‡§ö‡§ï‡•ç‡§∞ ‡§ï‡•ã ‡§§‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à‡•§",
    nutrientBenefitTitle: "‡§â‡§®‡•ç‡§®‡§§ ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ ‡§â‡§™‡§Ø‡•ã‡§ó",
    nutrientBenefitDesc: "‡§´‡§≤‡§ø‡§Ø‡§æ‡§Ç ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§ï‡§æ ‡§∏‡•ç‡§•‡§ø‡§∞‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡§Ç, ‡§î‡§∞ ‡§¨‡§æ‡§¶ ‡§ï‡•Ä ‡§´‡§∏‡§≤‡•á‡§Ç ‡§Ö‡§µ‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç, ‡§ú‡§ø‡§∏‡§∏‡•á ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§ï‡§Æ ‡§π‡•ã ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§",
    
    riceBenefit1: "‡§Ö‡§ß‡§ø‡§ï ‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§Æ‡§æ‡§®‡§∏‡•Ç‡§® ‡§ï‡•á ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§Æ‡•á‡§≤ ‡§ñ‡§æ‡§§‡•Ä ‡§π‡•à‡•§",
    riceBenefit2: "‡§∂‡•Å‡§∑‡•ç‡§ï ‡§≠‡•Ç‡§Æ‡§ø ‡§ï‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§Æ ‡§ñ‡§∞‡§™‡§§‡§µ‡§æ‡§∞‡•ã‡§Ç ‡§î‡§∞ ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§ö‡§ï‡•ç‡§∞ ‡§ï‡•ã ‡§§‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à‡•§",
    wheatBenefit1: "‡§ñ‡§∞‡•Ä‡§´ ‡§ï‡•á ‡§Æ‡•å‡§∏‡§Æ ‡§∏‡•á ‡§¨‡§ö‡•Ä ‡§π‡•Å‡§à ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§î‡§∞ ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
    wheatBenefit2: "‡§á‡§∏‡§ï‡•Ä ‡§Ö‡§≤‡§ó ‡§ú‡§°‡§º ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡§µ‡§æ ‡§ï‡•á ‡§∏‡§Ç‡§ö‡§æ‡§∞ ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§",
    legumesBenefit1: "‡§µ‡§æ‡§Ø‡•Å‡§Æ‡§Ç‡§°‡§≤‡•Ä‡§Ø ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§ï‡•ã ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§∏‡•á ‡§Ø‡§π ‡§Ö‡§ó‡§≤‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§µ‡§æ‡§≠‡§æ‡§µ‡§ø‡§ï ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§",
    legumesBenefit2: "‡§π‡§∞‡•Ä ‡§ñ‡§æ‡§¶ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§∏‡•á ‡§ú‡•à‡§µ‡§ø‡§ï ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§î‡§∞ ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§",

    cropEncyclopedia: "‡§´‡§∏‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§ï‡•ã‡§∂",
    soilPreparation: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä",
    commonDiseases: "‡§Ü‡§Æ ‡§∞‡•ã‡§ó",
    pestControl: "‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£",
    harvesting: "‡§ï‡§ü‡§æ‡§à ‡§î‡§∞ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£",

    riceSoilPrep: "‡§ñ‡•á‡§§ ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§®‡•Ä ‡§≠‡§∞‡§ï‡§∞ 2-3 ‡§¨‡§æ‡§∞ ‡§ú‡•Å‡§§‡§æ‡§à ‡§ï‡§∞‡§ï‡•á ‡§ï‡•Ä‡§ö‡§°‡§º ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§è‡§ï ‡§Æ‡§π‡•Ä‡§®, ‡§®‡§∞‡§Æ ‡§¨‡•Ä‡§ú-‡§ï‡•ç‡§Ø‡§æ‡§∞‡•Ä ‡§¨‡§® ‡§∏‡§ï‡•á‡•§ ‡§∏‡§Æ‡§æ‡§® ‡§ú‡§≤ ‡§µ‡§ø‡§§‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡•á‡§§ ‡§ï‡•ã ‡§∏‡§Æ‡§§‡§≤ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    riceDiseases: "‡§¨‡•ç‡§≤‡§æ‡§∏‡•ç‡§ü (‡§™‡§æ‡§á‡§∞‡§ø‡§ï‡•ç‡§Ø‡§≤‡•á‡§∞‡§ø‡§Ø‡§æ ‡§ì‡§∞‡§æ‡§á‡§ú‡•Ä) ‡§î‡§∞ ‡§¨‡•à‡§ï‡•ç‡§ü‡•Ä‡§∞‡§ø‡§Ø‡§≤ ‡§¨‡•ç‡§≤‡§æ‡§á‡§ü (‡§ú‡•à‡§®‡•ç‡§•‡•ã‡§Æ‡•ã‡§®‡§æ‡§∏ ‡§ì‡§∞‡§æ‡§á‡§ú‡•Ä)‡•§ ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§ï‡§µ‡§ï‡§®‡§æ‡§∂‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
    ricePestControl: "‡§§‡§®‡§æ ‡§õ‡•á‡§¶‡§ï ‡§î‡§∞ ‡§™‡§§‡•ç‡§§‡•Ä ‡§Æ‡•ã‡§°‡§º‡§ï ‡§Ü‡§Æ ‡§ï‡•Ä‡§ü ‡§π‡•à‡§Ç‡•§ ‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§ü‡•ç‡§∞‡•à‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§ü‡•à‡§™ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•ã‡§ï‡•ç‡§≤‡•ã‡§∞‡§æ‡§á‡§° ‡§ú‡•à‡§∏‡•á ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
    riceHarvesting: "‡§ú‡§¨ ‡§¨‡§æ‡§≤‡•Ä ‡§Æ‡•á‡§Ç 80-85% ‡§¶‡§æ‡§®‡•á ‡§™‡§ï ‡§ú‡§æ‡§è‡§Ç ‡§§‡•ã ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ 12-14% ‡§®‡§Æ‡•Ä ‡§§‡§ï ‡§∏‡•Å‡§ñ‡§æ‡§è‡§Ç‡•§",

    wheatSoilPrep: "‡§Ö‡§ö‡•ç‡§õ‡•á ‡§Ö‡§Ç‡§ï‡•Å‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§≠‡•Å‡§∞‡§≠‡•Å‡§∞‡•Ä ‡§≤‡•á‡§ï‡§ø‡§® ‡§†‡•ã‡§∏ ‡§¨‡•Ä‡§ú-‡§ï‡•ç‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ 2-3 ‡§ú‡•Å‡§§‡§æ‡§à ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡•à‡§∞‡•ã ‡§ö‡§≤‡§æ‡§ï‡§∞ ‡§ñ‡•á‡§§ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
    wheatDiseases: "‡§∞‡§∏‡•ç‡§ü (‡§™‡§ï‡•ç‡§∏‡§ø‡§®‡§ø‡§Ø‡§æ ‡§è‡§∏‡§™‡•Ä‡§™‡•Ä) ‡§î‡§∞ ‡§∏‡•ç‡§Æ‡§ü‡•§ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§, ‡§∞‡•ã‡§ó ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡•Ä ‡§¨‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¨‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡§µ‡§ï‡§®‡§æ‡§∂‡•Ä ‡§∏‡•á ‡§â‡§™‡§ö‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
    wheatPestControl: "‡§è‡§´‡§ø‡§°‡•ç‡§∏ ‡§è‡§ï ‡§¨‡§°‡§º‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ ‡§á‡§Æ‡§ø‡§°‡§æ‡§ï‡•ç‡§≤‡•ã‡§™‡•ç‡§∞‡§ø‡§° ‡§ú‡•à‡§∏‡•á ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä‡§ó‡§§ ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï ‡§ï‡§æ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§",
    wheatHarvesting: "‡§ú‡§¨ ‡§™‡•Å‡§Ü‡§≤ ‡§∏‡•Ç‡§ñ‡§ï‡§∞ ‡§≠‡§Ç‡§ó‡•Å‡§∞ ‡§π‡•ã ‡§ú‡§æ‡§è ‡§î‡§∞ ‡§¶‡§æ‡§®‡•á ‡§∏‡§ñ‡•ç‡§§ ‡§π‡•ã ‡§ú‡§æ‡§è‡§Ç ‡§§‡•ã ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§•‡•ç‡§∞‡•á‡§∏‡§ø‡§Ç‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§†‡§Ç‡§°‡•Ä, ‡§∏‡•Ç‡§ñ‡•Ä ‡§ú‡§ó‡§π ‡§™‡§∞ ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",

    soybeanSoilPrep: "‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§µ‡§æ‡§≤‡•Ä ‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§è‡§ï ‡§ó‡§π‡§∞‡•Ä ‡§ú‡•Å‡§§‡§æ‡§à ‡§ï‡•á ‡§¨‡§æ‡§¶ 2-3 ‡§π‡•à‡§∞‡•ã ‡§ö‡§≤‡§æ‡§®‡§æ ‡§è‡§ï ‡§Æ‡§π‡•Ä‡§® ‡§ú‡•Å‡§§‡§æ‡§à ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§π‡•à‡•§",
    soybeanDiseases: "‡§Æ‡•ã‡§ú‡•á‡§ï ‡§µ‡§æ‡§Ø‡§∞‡§∏ ‡§î‡§∞ ‡§∞‡§∏‡•ç‡§ü‡•§ ‡§µ‡•á‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•Ä‡§°‡§º‡•ã‡§Ç ‡§ï‡•ã ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•ã ‡§π‡§ü‡§æ‡§ï‡§∞ ‡§®‡§∑‡•ç‡§ü ‡§ï‡§∞ ‡§¶‡•á‡§Ç‡•§",
    soybeanPestControl: "‡§ó‡§∞‡•ç‡§°‡§≤ ‡§¨‡•Ä‡§ü‡§≤ ‡§î‡§∞ ‡§≤‡•Ä‡§´ ‡§Æ‡§æ‡§á‡§®‡§∞ ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§ï‡•Ä‡§ü ‡§π‡•à‡§Ç‡•§ ‡§ï‡•ç‡§µ‡§ø‡§®‡§æ‡§≤‡§´‡•â‡§∏ ‡§Ø‡§æ ‡§ï‡•ç‡§≤‡•ã‡§∞‡§™‡§æ‡§á‡§∞‡•Ä‡§´‡•ã‡§∏ ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§ï‡•ã ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§",
    soybeanHarvesting: "‡§ú‡§¨ ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§™‡•Ä‡§≤‡•Ä ‡§π‡•ã‡§ï‡§∞ ‡§ó‡§ø‡§∞ ‡§ú‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§´‡§≤‡§ø‡§Ø‡§æ‡§Ç ‡§∏‡•Ç‡§ñ ‡§ú‡§æ‡§è‡§Ç ‡§§‡•ã ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡•Å‡§ñ‡§æ‡§®‡•á ‡§∏‡•á ‡§¶‡§æ‡§®‡•á ‡§¨‡§ø‡§ñ‡§∞‡§®‡•á ‡§ï‡§æ ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§",
    
    cottonSoilPrep: "‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§°‡§º ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ó‡§π‡§∞‡•Ä ‡§ú‡•Å‡§§‡§æ‡§à ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§î‡§∞ ‡§µ‡§æ‡§§‡§® ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§†‡•Ä ‡§π‡•Å‡§à ‡§ï‡•ç‡§Ø‡§æ‡§∞‡§ø‡§Ø‡§æ‡§Å ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
    cottonDiseases: "‡§¨‡•â‡§≤ ‡§∞‡•â‡§ü ‡§î‡§∞ ‡§≤‡•Ä‡§´ ‡§ï‡§∞‡•ç‡§≤ ‡§µ‡§æ‡§Ø‡§∞‡§∏ ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§ö‡§ø‡§Ç‡§§‡§æ‡§è‡§Å ‡§π‡•à‡§Ç‡•§ ‡§∞‡•ã‡§ó ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡•Ä ‡§∏‡§Ç‡§ï‡§∞ ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§´‡•á‡§¶ ‡§Æ‡§ï‡•ç‡§ñ‡•Ä ‡§ï‡•Ä ‡§Ü‡§¨‡§æ‡§¶‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
    cottonPestControl: "‡§¨‡•â‡§≤‡§µ‡§∞‡•ç‡§Æ (‡§ó‡•Å‡§≤‡§æ‡§¨‡•Ä, ‡§ß‡§¨‡•ç‡§¨‡•á‡§¶‡§æ‡§∞) ‡§∏‡§¨‡§∏‡•á ‡§µ‡§ø‡§®‡§æ‡§∂‡§ï‡§æ‡§∞‡•Ä ‡§π‡•à‡§Ç‡•§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§ü‡•ç‡§∞‡•à‡§™ ‡§î‡§∞ ‡§è‡§ï‡•Ä‡§ï‡•É‡§§ ‡§ï‡•Ä‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® (‡§Ü‡§à‡§™‡•Ä‡§è‡§Æ) ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
    cottonHarvesting: "‡§∂‡•Å‡§∑‡•ç‡§ï ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§´‡§ü‡•á ‡§π‡•Å‡§è ‡§¨‡•â‡§≤ ‡§∏‡•á ‡§ï‡§™‡§æ‡§∏ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§ ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ó‡•Ä‡§≤‡•Ä ‡§ï‡§™‡§æ‡§∏ ‡§ö‡•Å‡§®‡§®‡•á ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§",
    
    sugarcaneSoilPrep: "‡§ó‡§®‡•ç‡§®‡•á ‡§ï‡•á ‡§ü‡•Å‡§ï‡§°‡§º‡•ã‡§Ç ‡§ï‡•ã ‡§≤‡§ó‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ó‡§π‡§∞‡•Ä ‡§ú‡•Å‡§§‡§æ‡§à ‡§î‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡•Ä ‡§ó‡§à ‡§ñ‡§æ‡§á‡§Ø‡•ã‡§Ç ‡§Ø‡§æ ‡§Æ‡•á‡§°‡§º‡•ã‡§Ç ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    sugarcaneDiseases: "‡§≤‡§æ‡§≤ ‡§∏‡§°‡§º‡§® ‡§è‡§ï ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§∞‡•ã‡§ó ‡§π‡•à‡•§ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§ ‡§∞‡•ã‡§ó ‡§Æ‡•Å‡§ï‡•ç‡§§ ‡§ü‡•Å‡§ï‡§°‡§º‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ú‡§®‡§ø‡§§ ‡§∞‡•ã‡§ó‡§ú‡§®‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
    sugarcanePestControl: "‡§Ö‡§ó‡•ç‡§∞ ‡§™‡•ç‡§∞‡§∞‡•ã‡§π ‡§¨‡•á‡§ß‡§ï ‡§î‡§∞ ‡§¶‡•Ä‡§Æ‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡•ç‡§∑‡§§‡§ø ‡§™‡§π‡•Å‡§Ç‡§ö‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§∞‡•ã‡§™‡§£ ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
    sugarcaneHarvesting: "‡§ú‡§¨ ‡§ó‡§®‡•ç‡§®‡§æ ‡§ö‡§∞‡§Æ ‡§™‡§∞‡§ø‡§™‡§ï‡•ç‡§µ‡§§‡§æ ‡§™‡§∞ ‡§™‡§π‡•Å‡§Ç‡§ö ‡§ú‡§æ‡§è ‡§§‡•ã ‡§ï‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç, ‡§ú‡•ã ‡§∏‡•Å‡§ï‡•ç‡§∞‡•ã‡§ú ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§∏‡•á ‡§á‡§Ç‡§ó‡§ø‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§ ‡§ó‡§®‡•ç‡§®‡•á ‡§ï‡•ã ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•á ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•á ‡§ï‡§∞‡•Ä‡§¨ ‡§∏‡•á ‡§ï‡§æ‡§ü‡•á‡§Ç‡•§",

    harvestPlanner: {
      title: "‡§ï‡§ü‡§æ‡§à ‡§î‡§∞ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ï‡§æ‡§∞",
      selectCrop: "‡§è‡§ï ‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç",
      selectSowingDate: "‡§¨‡•Å‡§µ‡§æ‡§à ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§ö‡•Å‡§®‡•á‡§Ç",
      forecastButton: "‡§ï‡§ü‡§æ‡§à ‡§ï‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç",
      harvestWindow: "‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§ï‡§ü‡§æ‡§à ‡§ñ‡§ø‡§°‡§º‡§ï‡•Ä",
      dailyForecast: "‡§¶‡•à‡§®‡§ø‡§ï ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®",
      optimalDay: "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§¶‡§ø‡§®",
      postHarvestTips: "‡§ï‡§ü‡§æ‡§à ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡•á ‡§ü‡§ø‡§™‡•ç‡§∏",
      tipRice: "‡§ñ‡§∞‡§æ‡§¨ ‡§π‡•ã‡§®‡•á ‡§∏‡•á ‡§¨‡§ö‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ 12-14% ‡§®‡§Æ‡•Ä ‡§§‡§ï ‡§∏‡•Å‡§ñ‡§æ‡§è‡§Ç‡•§",
      tipWheat: "‡§∏‡§æ‡§´, ‡§∏‡•Ç‡§ñ‡•á ‡§ú‡•Ç‡§ü ‡§ï‡•á ‡§¨‡•ã‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§≤‡§ï‡§°‡§º‡•Ä ‡§ï‡•á ‡§§‡§ñ‡•ç‡§§‡•ã‡§Ç ‡§™‡§∞ ‡§∞‡§ñ‡•á‡§Ç‡•§",
      tipSoybean: "‡§∏‡§Ç‡§¶‡•Ç‡§∑‡§£ ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ú‡•à‡§∏‡•á ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§",
      tipCotton: "‡§ó‡§ø‡§®‡§ø‡§Ç‡§ó ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§¨‡•Ä‡§ú ‡§ï‡§™‡§æ‡§∏ (‡§ï‡§™‡§æ‡§∏) ‡§ï‡•ã ‡§è‡§ï ‡§∏‡•Ç‡§ñ‡•Ä, ‡§∏‡§æ‡§´ ‡§ú‡§ó‡§π ‡§™‡§∞ ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§≤‡§Ç‡§¨‡•á ‡§∏‡§Æ‡§Ø ‡§§‡§ï ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
      tipSugarcane: "‡§ï‡§ü‡§æ‡§à ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ú‡§ø‡§§‡§®‡•Ä ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§π‡•ã ‡§∏‡§ï‡•á (‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§∞‡•Ç‡§™ ‡§∏‡•á 24 ‡§ò‡§Ç‡§ü‡•á ‡§ï‡•á ‡§≠‡•Ä‡§§‡§∞) ‡§ó‡§®‡•ç‡§®‡•á ‡§ï‡•Ä ‡§™‡•á‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§∏‡•Å‡§ï‡•ç‡§∞‡•ã‡§ú ‡§ï‡•Ä ‡§π‡§æ‡§®‡§ø ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á‡•§",
    }
  }
};

/**
 * To add a new crop, follow these steps:
 * 1. Add a new object to this `cropSuggestions` array.
 * 2. Fill in all the details like `id`, `name`, `yield`, etc.
 * 3. Add the crop name to the `guidanceContent.en` and `guidanceContent.hi` objects (e.g., `cotton: "Cotton"`).
 * 4. Add the detailed encyclopedia content (soil prep, diseases, pests, harvesting) to `guidanceContent` for both languages.
 * 5. Add a new post-harvest tip (e.g., `tipCotton`) to the `harvestPlanner` section in `guidanceContent` for both languages.
 * 6. Make sure the `postHarvestTipKey` in your new crop object matches the key you created in step 5.
 */
const cropSuggestions = [
  {
    id: '1',
    name: 'Rice',
    nameHi: '‡§ö‡§æ‡§µ‡§≤',
    yield: '25 quintals/acre',
    yieldHi: '25 ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤/‡§è‡§ï‡§°‡§º',
    profit: 'high',
    profitMargin: '‚Çπ45,000/acre',
    sowingTime: 'June - July',
    sowingTimeHi: '‡§ú‡•Ç‡§® - ‡§ú‡•Å‡§≤‡§æ‡§à',
    harvestTime: 'November - December',
    harvestTimeHi: '‡§®‡§µ‡§Ç‡§¨‡§∞ - ‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞',
    image: 'https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?w=400',
    suitability: 95,
    details: {
      soilPrepKey: 'riceSoilPrep',
      diseasesKey: 'riceDiseases',
      pestControlKey: 'ricePestControl',
      harvestingKey: 'riceHarvesting',
    },
    postHarvestTipKey: 'tipRice',
  },
  {
    id: '2',
    name: 'Wheat',
    nameHi: '‡§ó‡•á‡§π‡•Ç‡§Ç',
    yield: '18 quintals/acre',
    yieldHi: '18 ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤/‡§è‡§ï‡§°‡§º',
    profit: 'medium',
    profitMargin: '‚Çπ32,000/acre',
    sowingTime: 'November - December',
    sowingTimeHi: '‡§®‡§µ‡§Ç‡§¨‡§∞ - ‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞',
    harvestTime: 'March - April',
    harvestTimeHi: '‡§Æ‡§æ‡§∞‡•ç‡§ö - ‡§Ö‡§™‡•ç‡§∞‡•à‡§≤',
    image: 'https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?w=400',
    suitability: 88,
    details: {
      soilPrepKey: 'wheatSoilPrep',
      diseasesKey: 'wheatDiseases',
      pestControlKey: 'wheatPestControl',
      harvestingKey: 'wheatHarvesting',
    },
    postHarvestTipKey: 'tipWheat',
  },
  {
    id: '3',
    name: 'Soybean',
    nameHi: '‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®',
    yield: '15 quintals/acre',
    yieldHi: '15 ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤/‡§è‡§ï‡§°‡§º',
    profit: 'medium',
    profitMargin: '‚Çπ28,000/acre',
    sowingTime: 'June - July',
    sowingTimeHi: '‡§ú‡•Ç‡§® - ‡§ú‡•Å‡§≤‡§æ‡§à',
    harvestTime: 'October - November',
    harvestTimeHi: '‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ - ‡§®‡§µ‡§Ç‡§¨‡§∞',
    image: 'https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?w=400',
    suitability: 82,
    details: {
      soilPrepKey: 'soybeanSoilPrep',
      diseasesKey: 'soybeanDiseases',
      pestControlKey: 'soybeanPestControl',
      harvestingKey: 'soybeanHarvesting',
    },
    postHarvestTipKey: 'tipSoybean',
  },
  {
    id: '4',
    name: 'Cotton',
    nameHi: '‡§ï‡§™‡§æ‡§∏',
    yield: '12 quintals/acre',
    yieldHi: '12 ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤/‡§è‡§ï‡§°‡§º',
    profit: 'high',
    profitMargin: '‚Çπ55,000/acre',
    sowingTime: 'April - May',
    sowingTimeHi: '‡§Ö‡§™‡•ç‡§∞‡•à‡§≤ - ‡§Æ‡§à',
    harvestTime: 'October - January',
    harvestTimeHi: '‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ - ‡§ú‡§®‡§µ‡§∞‡•Ä',
    image: 'https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?w=400',
    suitability: 85,
    details: {
      soilPrepKey: 'cottonSoilPrep',
      diseasesKey: 'cottonDiseases',
      pestControlKey: 'cottonPestControl',
      harvestingKey: 'cottonHarvesting',
    },
    postHarvestTipKey: 'tipCotton',
  },
  {
    id: '5',
    name: 'Sugarcane',
    nameHi: '‡§ó‡§®‡•ç‡§®‡§æ',
    yield: '40 tonnes/acre',
    yieldHi: '40 ‡§ü‡§®/‡§è‡§ï‡§°‡§º',
    profit: 'high',
    profitMargin: '‚Çπ80,000/acre',
    sowingTime: 'October - March',
    sowingTimeHi: '‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ - ‡§Æ‡§æ‡§∞‡•ç‡§ö',
    harvestTime: '12-18 months after sowing',
    harvestTimeHi: '‡§¨‡•Å‡§µ‡§æ‡§à ‡§ï‡•á 12-18 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§¨‡§æ‡§¶',
    image: 'https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?w=400',
    suitability: 90,
    details: {
      soilPrepKey: 'sugarcaneSoilPrep',
      diseasesKey: 'sugarcaneDiseases',
      pestControlKey: 'sugarcanePestControl',
      harvestingKey: 'sugarcaneHarvesting',
    },
    postHarvestTipKey: 'tipSugarcane',
  }
];

const fertilizerSchedule = [
  { stage: 'Sowing', stageHi: '‡§¨‡•Å‡§Ü‡§à', fertilizer: 'DAP - 50 kg/acre', fertilizerHi: '‡§°‡•Ä‡§è‡§™‡•Ä - 50 ‡§ï‡§ø‡§≤‡•ã/‡§è‡§ï‡§°‡§º', timing: 'At sowing time', timingHi: '‡§¨‡•Å‡§Ü‡§à ‡§ï‡•á ‡§∏‡§Æ‡§Ø' },
  { stage: 'Tillering', stageHi: '‡§ï‡§≤‡•ç‡§≤‡•á ‡§®‡§ø‡§ï‡§≤‡§®‡§æ', fertilizer: 'Urea - 25 kg/acre', fertilizerHi: '‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ - 25 ‡§ï‡§ø‡§≤‡•ã/‡§è‡§ï‡§°‡§º', timing: '20-25 days after sowing', timingHi: '‡§¨‡•Å‡§Ü‡§à ‡§ï‡•á 20-25 ‡§¶‡§ø‡§® ‡§¨‡§æ‡§¶' },
  { stage: 'Flowering', stageHi: '‡§´‡•Ç‡§≤ ‡§Ü‡§®‡§æ', fertilizer: 'Potash - 20 kg/acre', fertilizerHi: '‡§™‡•ã‡§ü‡§æ‡§∂ - 20 ‡§ï‡§ø‡§≤‡•ã/‡§è‡§ï‡§°‡§º', timing: '45-50 days after sowing', timingHi: '‡§¨‡•Å‡§Ü‡§à ‡§ï‡•á 45-50 ‡§¶‡§ø‡§® ‡§¨‡§æ‡§¶' }
];

const cropRotationData = [
  { seasonKey: 'kharif', cropKey: 'rice', benefitKeys: ['riceBenefit1', 'riceBenefit2'], colorClasses: { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-800', accent: 'text-green-600', buttonBg: 'bg-green-600', } },
  { seasonKey: 'rabi', cropKey: 'wheat', benefitKeys: ['wheatBenefit1', 'wheatBenefit2'], colorClasses: { bg: 'bg-orange-50', border: 'border-orange-200', text: 'text-orange-800', accent: 'text-orange-600', buttonBg: 'bg-orange-600', } },
  { seasonKey: 'summer', cropKey: 'legumes', benefitKeys: ['legumesBenefit1', 'legumesBenefit2'], colorClasses: { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-800', accent: 'text-blue-600', buttonBg: 'bg-blue-600', } }
];

const HarvestPlanner = ({ content, langCode }: { content: typeof guidanceContent.en.harvestPlanner, langCode: string }) => {
  const [selectedCrop, setSelectedCrop] = useState('');
  const [sowingDate, setSowingDate] = useState('');
  const [forecast, setForecast] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleForecast = () => {
    if (!selectedCrop || !sowingDate) return;
    setIsLoading(true);
    setTimeout(() => {
      const cropData = cropSuggestions.find(c => c.name === selectedCrop);
      const mockForecast = {
        window: langCode === 'hi' ? '28 ‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ - 3 ‡§®‡§µ‡§Ç‡§¨‡§∞, 2025' : 'Oct 28 - Nov 3, 2025',
        tip: guidanceContent[langCode as 'en' | 'hi'].harvestPlanner[cropData?.postHarvestTipKey as 'tipRice'],
        daily: [
          { day: langCode === 'hi' ? '‡§Æ‡§Ç‡§ó‡§≤' : 'Tue', date: 28, Icon: Sun, temp: 29, rain: 5 },
          { day: langCode === 'hi' ? '‡§¨‡•Å‡§ß' : 'Wed', date: 29, Icon: Sun, temp: 30, rain: 10 },
          { day: langCode === 'hi' ? '‡§ó‡•Å‡§∞‡•Å' : 'Thu', date: 30, Icon: Cloudy, temp: 28, rain: 20 },
          { day: langCode === 'hi' ? '‡§∂‡•Å‡§ï‡•ç‡§∞' : 'Fri', date: 31, Icon: Sun, temp: 31, rain: 0, optimal: true },
          { day: langCode === 'hi' ? '‡§∂‡§®‡§ø' : 'Sat', date: 1, Icon: CloudRain, temp: 27, rain: 60 },
          { day: langCode === 'hi' ? '‡§∞‡§µ‡§ø' : 'Sun', date: 2, Icon: Sun, temp: 29, rain: 15 },
          { day: langCode === 'hi' ? '‡§∏‡•ã‡§Æ' : 'Mon', date: 3, Icon: Cloudy, temp: 29, rain: 25 },
        ]
      };
      setForecast(mockForecast);
      setIsLoading(false);
    }, 1500);
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border p-4 space-y-4">
      <div className="flex items-center space-x-3">
        <div className="bg-teal-100 p-2 rounded-full"><Warehouse className="w-5 h-5 text-teal-600"/></div>
        <h3 className="font-semibold text-gray-700">{content.title}</h3>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label className="text-sm font-medium text-gray-600 block mb-1">{content.selectCrop}</label>
          <select value={selectedCrop} onChange={e => setSelectedCrop(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-2 focus:ring-green-500">
            <option value="">--</option>
            {cropSuggestions.map(c => <option key={c.id} value={c.name}>{langCode === 'hi' ? c.nameHi : c.name}</option>)}
          </select>
        </div>
        <div>
          <label className="text-sm font-medium text-gray-600 block mb-1">{content.selectSowingDate}</label>
          <input type="date" value={sowingDate} onChange={e => setSowingDate(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500"/>
        </div>
      </div>
      <SimpleButton onClick={handleForecast} className="w-full" disabled={isLoading || !selectedCrop || !sowingDate}>
        {isLoading ? 'Forecasting...' : content.forecastButton}
      </SimpleButton>

      {forecast && (
        <div className="border-t pt-4 mt-4 space-y-4">
          <div>
            <h4 className="font-semibold text-gray-600 mb-2">{content.harvestWindow}: <span className="text-green-600">{forecast.window}</span></h4>
            <div className="flex items-center justify-around bg-gray-50 p-2 rounded-lg text-center">
              {forecast.daily.map((d: any) => (
                <div key={d.date} className={`p-2 rounded-lg transition-all ${d.optimal ? 'bg-green-100 ring-2 ring-green-500' : ''}`}>
                  <div className="text-xs font-medium text-gray-500">{d.day}</div>
                  <d.Icon className={`w-6 h-6 my-1 mx-auto ${d.optimal ? 'text-green-600' : 'text-gray-400'}`} />
                  <div className="text-sm font-semibold">{d.temp}¬∞</div>
                  {d.optimal && <div className="text-xs text-green-600 font-bold -mb-1 mt-1">{content.optimalDay}</div>}
                </div>
              ))}
            </div>
          </div>
          <div>
            <h4 className="font-semibold text-gray-600 mb-2">{content.postHarvestTips}</h4>
            <div className="bg-blue-50 border-l-4 border-blue-400 p-3 rounded-r-lg">
              <p className="text-sm text-blue-800">{forecast.tip}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};


export function CropGuidance({ selectedLanguage, onNavigate, onLanguageChange }: CropGuidanceProps) {
  const [selectedCrop, setSelectedCrop] = useState<(typeof cropSuggestions[0] & { details: any }) | null>(null);
  const [activeRotationIndex, setActiveRotationIndex] = useState(0);

  const langCode = selectedLanguage?.code || 'en';
  const content = guidanceContent[langCode as keyof typeof guidanceContent] || guidanceContent.en;

  const getProfitColor = (profit: string) => {
    switch (profit) {
      case 'high': return 'text-green-600 bg-green-100';
      case 'medium': return 'text-orange-600 bg-orange-100';
      case 'low': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getProfitText = (profit: string) => {
    switch (profit) {
      case 'high': return content.highProfit;
      case 'medium': return content.mediumProfit;
      case 'low': return content.lowProfit;
      default: return profit;
    }
  };
  
  const activeSeasonData = cropRotationData[activeRotationIndex];

  if (selectedCrop) {
    return (
      <div className="flex flex-col h-screen bg-gray-50">
        <div className="bg-green-600 text-white p-4 sticky top-0 z-10 shadow-md">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <SimpleButton onClick={() => setSelectedCrop(null)} variant="ghost" size="icon" className="text-white hover:bg-green-700">
                <ArrowLeft className="w-6 h-6" />
              </SimpleButton>
              <div>
                <h1 className="text-xl font-bold">{langCode === 'hi' ? selectedCrop.nameHi : selectedCrop.name}</h1>
                <p className="text-sm text-green-100">Detailed Guidance</p>
              </div>
            </div>
            <LanguageSelector selectedLanguage={selectedLanguage} onLanguageChange={onLanguageChange} variant="header"/>
          </div>
        </div>

        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          <div className="bg-white rounded-xl shadow-sm border p-4">
            <div className="flex items-start space-x-4 mb-4">
              <ImageWithFallback src={selectedCrop.image} alt={selectedCrop.name} className="w-20 h-20 rounded-lg object-cover"/>
              <div className="flex-1">
                <h2 className="text-lg font-semibold text-gray-800 mb-2">{langCode === 'hi' ? selectedCrop.nameHi : selectedCrop.name}</h2>
                <div className="grid grid-cols-2 gap-2">
                  <div className="p-2 bg-green-50 rounded-lg text-center">
                    <div className="text-xs text-green-700">{content.yieldEstimate}</div>
                    <div className="font-semibold text-green-800 text-sm">{langCode === 'hi' ? selectedCrop.yieldHi : selectedCrop.yield}</div>
                  </div>
                  <div className="p-2 bg-blue-50 rounded-lg text-center">
                    <div className="text-xs text-blue-700">{content.profitability}</div>
                    <div className="font-semibold text-blue-800 text-sm">{selectedCrop.profitMargin}</div>
                  </div>
                </div>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <div className={`px-3 py-1 rounded-full text-xs font-medium ${getProfitColor(selectedCrop.profit)}`}>{getProfitText(selectedCrop.profit)}</div>
              <div className="text-right">
                <div className="text-xs text-gray-500">Suitability</div>
                <div className="font-semibold text-green-600">{selectedCrop.suitability}%</div>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-xl shadow-sm border p-4">
              <h3 className="font-semibold mb-3 flex items-center text-gray-700"><Calendar className="w-5 h-5 mr-2 text-blue-500" />{content.sowingCalendar}</h3>
              <div className="grid grid-cols-2 gap-3">
                  <div className="p-3 bg-green-50 rounded-lg">
                    <div className="flex items-center space-x-2 mb-1"><Sprout className="w-4 h-4 text-green-600" /><span className="font-medium text-green-800 text-sm">{content.sowingTime}</span></div>
                    <p className="text-green-700 text-sm">{langCode === 'hi' ? selectedCrop.sowingTimeHi : selectedCrop.sowingTime}</p>
                  </div>
                  <div className="p-3 bg-orange-50 rounded-lg">
                    <div className="flex items-center space-x-2 mb-1"><Sun className="w-4 h-4 text-orange-600" /><span className="font-medium text-orange-800 text-sm">{content.harvestTime}</span></div>
                    <p className="text-orange-700 text-sm">{langCode === 'hi' ? selectedCrop.harvestTimeHi : selectedCrop.harvestTime}</p>
                  </div>
              </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border p-4">
            <h3 className="font-semibold mb-3 flex items-center text-gray-700"><Beaker className="w-5 h-5 mr-2 text-purple-500" />{content.fertilizerSchedule}</h3>
            <div className="space-y-2">
              {fertilizerSchedule.map((s, i) => (
                <div key={i} className="flex items-center space-x-3 p-2 bg-purple-50 rounded-lg">
                  <div className="w-6 h-6 bg-purple-600 text-white rounded-full flex items-center justify-center text-xs font-bold">{i + 1}</div>
                  <div className="flex-1">
                    <div className="font-semibold text-purple-800 text-sm">{langCode === 'hi' ? s.stageHi : s.stage}</div>
                    <div className="text-xs text-purple-600">{langCode === 'hi' ? s.fertilizerHi : s.fertilizer}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border p-4">
              <h3 className="font-semibold mb-4 flex items-center text-gray-700"><BookOpen className="w-5 h-5 mr-2 text-indigo-500" />{content.cropEncyclopedia}</h3>
              <div className="space-y-4">
                  <div>
                      <h4 className="font-medium text-gray-600 flex items-center mb-1"><Tractor className="w-4 h-4 mr-2 text-yellow-600"/>{content.soilPreparation}</h4>
                      <p className="text-sm text-gray-500 pl-6 border-l-2 border-yellow-200 ml-2 py-1">{String(content[selectedCrop.details.soilPrepKey as keyof typeof content])}</p>
                  </div>
                  <div>
                      <h4 className="font-medium text-gray-600 flex items-center mb-1"><Biohazard className="w-4 h-4 mr-2 text-red-600"/>{content.commonDiseases}</h4>
                      <p className="text-sm text-gray-500 pl-6 border-l-2 border-red-200 ml-2 py-1">{String(content[selectedCrop.details.diseasesKey as keyof typeof content])}</p>
                  </div>
                  <div>
                      <h4 className="font-medium text-gray-600 flex items-center mb-1"><Bug className="w-4 h-4 mr-2 text-green-600"/>{content.pestControl}</h4>
                      <p className="text-sm text-gray-500 pl-6 border-l-2 border-green-200 ml-2 py-1">{String(content[selectedCrop.details.pestControlKey as keyof typeof content])}</p>
                  </div>
                  <div>
                      <h4 className="font-medium text-gray-600 flex items-center mb-1"><Sprout className="w-4 h-4 mr-2 text-cyan-600"/>{content.harvesting}</h4>
                      <p className="text-sm text-gray-500 pl-6 border-l-2 border-cyan-200 ml-2 py-1">{String(content[selectedCrop.details.harvestingKey as keyof typeof content])}</p>
                  </div>
              </div>
          </div>
          
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      <div className="bg-green-600 text-white p-4 sticky top-0 z-10 shadow-md">
        <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
                <SimpleButton onClick={() => onNavigate('new-dashboard')} variant="ghost" size="icon" className="text-white hover:bg-green-700">
                    <ArrowLeft className="w-6 h-6" />
                </SimpleButton>
                <div>
                    <h1 className="text-xl font-bold">{content.title}</h1>
                    <p className="text-sm text-green-100">{content.subtitle}</p>
                </div>
            </div>
            <LanguageSelector selectedLanguage={selectedLanguage} onLanguageChange={onLanguageChange} variant="header"/>
        </div>
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        <div className="bg-white rounded-xl shadow-sm border p-4">
          <h2 className="font-semibold mb-2 text-gray-700">{content.currentSeason}: Kharif 2024</h2>
          <div className="p-3 bg-blue-50 rounded-lg border border-blue-100">
            <p className="text-blue-800 text-sm mb-1">üåßÔ∏è Monsoon is ideal for rice & cotton.</p>
            <p className="text-xs text-blue-600">{content.nextSeason}: Wheat performs better in Rabi.</p>
          </div>
        </div>
        
        <div className="bg-white rounded-xl shadow-sm border p-4">
          <h2 className="font-semibold mb-3 text-gray-700">{content.recommendedCrops}</h2>
          <div className="space-y-3">
            {cropSuggestions.map((crop) => (
              <SimpleButton key={crop.id} onClick={() => setSelectedCrop(crop as any)} variant="outline" className="w-full p-3 h-auto justify-between text-left">
                <div className="flex items-center space-x-3">
                  <ImageWithFallback src={crop.image} alt={crop.name} className="w-16 h-16 rounded-lg object-cover" />
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-1">
                        <h3 className="font-semibold text-gray-800">{langCode === 'hi' ? crop.nameHi : crop.name}</h3>
                        <div className={`px-2 py-0.5 rounded text-xs font-medium ${getProfitColor(crop.profit)}`}>{getProfitText(crop.profit)}</div>
                    </div>
                    <div className="grid grid-cols-3 gap-2 text-xs">
                        <div><div className="text-gray-500">Yield</div><div className="font-medium text-green-600">{langCode === 'hi' ? crop.yieldHi : crop.yield}</div></div>
                        <div><div className="text-gray-500">Profit</div><div className="font-medium text-blue-600">{crop.profitMargin}</div></div>
                        <div><div className="text-gray-500">Suitability</div><div className="font-medium text-purple-600">{crop.suitability}%</div></div>
                    </div>
                  </div>
                </div>
                <ChevronRight className="w-5 h-5 text-gray-400" />
              </SimpleButton>
            ))}
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border p-4 space-y-4">
          <div>
              <h3 className="font-semibold mb-4 flex items-center text-gray-700"><RotateCcw className="w-5 h-5 mr-2 text-green-500" />{content.cropRotation}</h3>
              <div className="flex items-center justify-between px-1 mb-4">
                {cropRotationData.map((season, index) => (
                  <React.Fragment key={season.seasonKey}>
                    <div className="flex flex-col items-center text-center">
                      <button onClick={() => setActiveRotationIndex(index)} className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold text-white transition-all duration-300 ${activeRotationIndex === index ? `${season.colorClasses.buttonBg} scale-110` : 'bg-gray-300'}`}>{index + 1}</button>
                      <span className={`mt-2 text-xs font-medium w-16 ${activeRotationIndex === index ? season.colorClasses.accent : 'text-gray-500'}`}>{String(content[season.seasonKey as keyof typeof content])}</span>
                    </div>
                    {index < cropRotationData.length - 1 && (<div className="flex-1 h-0.5 bg-gray-200 -mx-2"></div>)}
                  </React.Fragment>
                ))}
              </div>
              <div className={`p-3 rounded-lg border transition-all duration-300 ${activeSeasonData.colorClasses.bg} ${activeSeasonData.colorClasses.border}`}>
                <h4 className={`font-semibold mb-2 text-sm ${activeSeasonData.colorClasses.text}`}>{content.cropForSeason} <span className={activeSeasonData.colorClasses.accent}>{String(content[activeSeasonData.cropKey as keyof typeof content])}</span></h4>
                <ul className="space-y-1.5">
                  {activeSeasonData.benefitKeys.map(key => (
                      <li key={key} className={`flex items-start space-x-2 text-xs ${activeSeasonData.colorClasses.text}`}>
                          <CheckCircle2 className={`w-3.5 h-3.5 mt-0.5 flex-shrink-0 ${activeSeasonData.colorClasses.accent}`} />
                          <span>{String(content[key as keyof typeof content])}</span>
                      </li>
                  ))}
                </ul>
              </div>
          </div>
          <div className="border-t pt-4">
             <h4 className="font-semibold text-gray-600 text-sm mb-3">{content.cropRotationDetailsTitle}</h4>
             <div className="space-y-3">
               <div className="flex items-start space-x-3">
                    <div className="bg-green-100 p-2 rounded-full"><Sprout className="w-5 h-5 text-green-600"/></div>
                    <div>
                        <h5 className="font-medium text-sm text-green-800">{content.soilHealthBenefitTitle}</h5>
                        <p className="text-xs text-gray-500">{content.soilHealthBenefitDesc}</p>
                    </div>
               </div>
                <div className="flex items-start space-x-3">
                    <div className="bg-red-100 p-2 rounded-full"><Shield className="w-5 h-5 text-red-600"/></div>
                    <div>
                        <h5 className="font-medium text-sm text-red-800">{content.pestManagementBenefitTitle}</h5>
                        <p className="text-xs text-gray-500">{content.pestManagementBenefitDesc}</p>
                    </div>
                </div>
                 <div className="flex items-start space-x-3">
                    <div className="bg-blue-100 p-2 rounded-full"><Droplets className="w-5 h-5 text-blue-600"/></div>
                    <div>
                        <h5 className="font-medium text-sm text-blue-800">{content.nutrientBenefitTitle}</h5>
                        <p className="text-xs text-gray-500">{content.nutrientBenefitDesc}</p>
                    </div>
                </div>
             </div>
          </div>
        </div>
        
        {/* --- HARVEST PLANNER MOVED HERE --- */}
        <HarvestPlanner content={content.harvestPlanner} langCode={langCode} />
        
      </div>
    </div>
  );
}

