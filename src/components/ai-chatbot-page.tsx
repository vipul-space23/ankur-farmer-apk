import React, { useState, useRef, useEffect } from 'react';
import { X, Send, Mic, User, Bot } from 'lucide-react';
import { Language, Screen } from '../App';
import { SimpleButton } from './simple-button';
import { ImageWithFallback } from './figma/ImageWithFallback';

interface AIChatbotPageProps {
  selectedLanguage: Language | null;
  onNavigate: (screen: Screen) => void;
  initialMessage?: string;
  initialHistory?: {role: 'user' | 'assistant', message: string}[];
}

const chatContent = {
  en: {
    title: "ЁЯМ╛ Farm AI Assistant",
    placeholder: "Ask about crops or farming tips...",
    send: "Send",
    typingIndicator: "Assistant is typing...",
    voiceInput: "Voice input",
    clearChat: "Clear chat",
    welcome: "Hello! I'm your AI farming assistant. How can I help you today?"
  },
  hi: {
    title: "ЁЯМ╛ рдЦреЗрддреА AI рд╕рд╣рд╛рдпрдХ",
    placeholder: "рдлрд╕рд▓, рдореМрд╕рдо рдпрд╛ рдЦреЗрддреА рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреВрдЫреЗрдВ...",
    send: "рднреЗрдЬреЗрдВ",
    typingIndicator: "рд╕рд╣рд╛рдпрдХ рдЯрд╛рдЗрдк рдХрд░ рд░рд╣рд╛ рд╣реИ...",
    voiceInput: "рдЖрд╡рд╛рдЬ рдЗрдирдкреБрдЯ",
    clearChat: "рдЪреИрдЯ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ",
    welcome: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?"
  },
  ta: {
    title: "ЁЯМ╛ ро╡ро┐ро╡роЪро╛роп AI роЙродро╡ро┐ропро╛ро│ро░рпН",
    placeholder: "рокропро┐ро░рпН, ро╡ро╛ройро┐ро▓рпИ роЕро▓рпНро▓родрпБ ро╡ро┐ро╡роЪро╛роп роХрпБро▒ро┐рокрпНрокрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роХрпЗро│рпБроЩрпНроХро│рпН...",
    send: "роЕройрпБрокрпНрокрпБ",
    typingIndicator: "роЙродро╡ро┐ропро╛ро│ро░рпН роЯрпИрокрпН роЪрпЖропрпНроХро┐ро▒ро╛ро░рпН...",
    voiceInput: "роХрпБро░ро▓рпН роЙро│рпНро│рпАроЯрпБ",
    clearChat: "роЕро░роЯрпНроЯрпИропрпИ роЕро┤ро┐роХрпНроХро╡рпБроорпН",
    welcome: "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН AI ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. роЗройрпНро▒рпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?"
  },
  te: {
    title: "ЁЯМ╛ р░╡р▒Нр░пр░╡р░╕р░╛р░п AI р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н",
    placeholder: "р░кр░Вр░Яр░▓р▒Б, р░╡р░╛р░др░╛р░╡р░░р░гр░В р░▓р▒Зр░жр░╛ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ър░┐р░Яр▒Нр░Хр░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ер░бр░Чр░Вр░бр░┐...",
    send: "р░кр░Вр░кр▒Б",
    typingIndicator: "р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н р░Яр▒Ир░кр▒Н р░Ър▒Зр░╕р▒Нр░др▒Лр░Вр░жр░┐...",
    voiceInput: "р░╡р░╛р░пр░┐р░╕р▒Н р░Зр░ир▒НтАМр░кр▒Бр░Яр▒Н",
    clearChat: "р░Ър░╛р░Яр▒Н р░Хр▒Нр░▓р░┐р░пр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    welcome: "р░╣р░▓р▒Л! р░ир▒Зр░ир▒Б р░ор▒А AI р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н. р░Ир░░р▒Лр░Ьр▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б?"
  },
  bn: {
    title: "ЁЯМ╛ ржХрзГрж╖рж┐ AI рж╕рж╣рж╛ржпрж╝ржХ",
    placeholder: "ржлрж╕рж▓, ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржмрж╛ ржХрзГрж╖рж┐ ржЯрж┐ржкрж╕ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи...",
    send: "ржкрж╛ржарж╛ржи",
    typingIndicator: "рж╕рж╣рж╛ржпрж╝ржХ ржЯрж╛ржЗржк ржХрж░ржЫрзЗржи...",
    voiceInput: "ржнржпрж╝рзЗрж╕ ржЗржиржкрзБржЯ",
    clearChat: "ржЪрзНржпрж╛ржЯ рж╕рж╛ржл ржХрж░рзБржи",
    welcome: "рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржкржирж╛рж░ AI ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХред ржЖржЬ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?"
  },
  mr: {
    title: "ЁЯМ╛ рд╢реЗрддреА AI рд╕рд╣рд╛рдпреНрдпрдХ",
    placeholder: "рдкреАрдХ, рд╣рд╡рд╛рдорд╛рди рдХрд┐рдВрд╡рд╛ рд╢реЗрддреАрдЪреНрдпрд╛ рдЯрд┐рдкреНрд╕ рд╡рд┐рд╢реЗрд╖ рд╡рд┐рдЪрд╛рд░рд╛...",
    send: "рдкрд╛рдард╡рд╛",
    typingIndicator: "рд╕рд╣рд╛рдпреНрдпрдХ рдЯрд╛рдЗрдк рдХрд░рдд рдЖрд╣реЗ...",
    voiceInput: "рд╡реНрд╣реЙрдЗрд╕ рдЗрдирдкреБрдЯ",
    clearChat: "рдЪреЕрдЯ рд╕рд╛рдл рдХрд░рд╛",
    welcome: "рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ AI рд╢реЗрддреА рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗред рдЖрдЬ рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?"
  },
  gu: {
    title: "ЁЯМ╛ ркЦрлЗркдрлА AI рк╕рк╣рк╛ркпркХ",
    placeholder: "рккрк╛ркХ, рк╣рк╡рк╛ркорк╛рки ркЕркерк╡рк╛ ркЦрлЗркдрлАркирлА ркЯрк┐рккрлНрк╕ рк╡рк┐рк╢рлЗ рккрлВркЫрлЛ...",
    send: "ркорлЛркХрк▓рлЛ",
    typingIndicator: "рк╕рк╣рк╛ркпркХ ркЯрк╛ркЗркк ркХрк░рлЗ ркЫрлЗ...",
    voiceInput: "рк╡рлЙркЗрк╕ ркЗркирккрлБркЯ",
    clearChat: "ркЪрлЗркЯ рк╕рк╛ркл ркХрк░рлЛ",
    welcome: "рк╣рлЗрк▓рлЛ! рк╣рлБркВ ркдркорк╛рк░рлЛ AI ркЦрлЗркдрлА рк╕рк╣рк╛ркпркХ ркЫрлБркВ. ркЖркЬрлЗ рк╣рлБркВ ркдркорк╛рк░рлА ркХрлЗрк╡рлА рк░рлАркдрлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?"
  },
  kn: {
    title: "ЁЯМ╛ р▓Хр│Гр▓╖р▓┐ AI р▓╕р▓╣р▓╛р▓пр▓Х",
    placeholder: "р▓мр│Жр▓│р│Жр▓Чр▓│р│Б, р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Ер▓ер▓╡р▓╛ р▓Хр│Гр▓╖р▓┐ р▓╕р▓▓р▓╣р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐...",
    send: "р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓┐",
    typingIndicator: "р▓╕р▓╣р▓╛р▓пр▓Х р▓Яр│Ир▓кр│Н р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр▓╛р▓░р│Ж...",
    voiceInput: "р▓зр│Нр▓╡р▓ир▓┐ р▓Зр▓ир│НтАМр▓кр│Бр▓Яр│Н",
    clearChat: "р▓Ър▓╛р▓Яр│Н р▓др│Жр▓░р▓╡р│Бр▓Чр│Кр▓│р▓┐р▓╕р▓┐",
    welcome: "р▓╣р▓▓р│Л! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о AI р▓Хр│Гр▓╖р▓┐ р▓╕р▓╣р▓╛р▓пр▓Х. р▓Зр▓Вр▓жр│Б р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?"
  },
  ml: {
    title: "ЁЯМ╛ р┤Хр╡Гр┤╖р┤┐ AI р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р╡Н",
    placeholder: "р┤╡р┤┐р┤│р┤Хр╡╛, р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤Хр╡Гр┤╖р┤┐ р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...",
    send: "р┤Ер┤пр┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х",
    typingIndicator: "р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р╡Н р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
    voiceInput: "р┤╡р╡Лр┤пр╡Нр┤╕р╡Н р┤Зр╡╗р┤кр╡Бр┤Яр╡Нр┤Яр╡Н",
    clearChat: "р┤Ър┤╛р┤▒р╡Нр┤▒р╡Н р┤ор┤╛р┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х",
    welcome: "р┤╣р┤▓р╡Л! р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤Хр╡Гр┤╖р┤┐ р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р┤╛р┤гр╡Н. р┤Зр┤ир╡Нр┤ир╡Н р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤В?"
  },
  pa: {
    title: "ЁЯМ╛ риЦрйЗридрйА AI ри╕ри╣ри╛риЗриХ",
    placeholder: "рилри╕ри▓ри╛риВ, риорйМри╕рио риЬри╛риВ риЦрйЗридрйА рижрйЗ риирйБри╕риЦри┐риЖриВ римри╛ри░рйЗ рикрйБрй▒риЫрйЛ...",
    send: "ринрйЗриЬрйЛ",
    typingIndicator: "ри╕ри╣ри╛риЗриХ риЯри╛риИрик риХри░ ри░ри┐ри╣ри╛ ри╣рйИ...",
    voiceInput: "риЖри╡ри╛риЬри╝ риЗриирикрйБрй▒риЯ",
    clearChat: "риЪрйИриЯ ри╕ри╛рилри╝ риХри░рйЛ",
    welcome: "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ ридрйБри╣ри╛рибри╛ AI риЦрйЗридрйА ри╕ри╣ри╛риЗриХ ри╣ри╛риВред риЕрй▒риЬ риорйИриВ ридрйБри╣ри╛рибрйА риХри┐ри╡рйЗриВ риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВ?"
  },
  ur: {
    title: "ЁЯМ╛ ┌й╪з╪┤╪к┌й╪з╪▒█М AI ╪з╪│╪│┘╣┘Ж┘╣",
    placeholder: "┘Б╪╡┘Д┘И┌║╪М ┘Е┘И╪│┘Е █М╪з ┌й╪з╪┤╪к┌й╪з╪▒█М ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┘╛┘И┌Ж┌╛█М┌║...",
    send: "╪и┌╛█М╪м█М┌║",
    typingIndicator: "╪з╪│╪│┘╣┘Ж┘╣ ┘╣╪з╪ж┘╛ ┌й╪▒ ╪▒█Б╪з █Б█Т...",
    voiceInput: "╪в┘И╪з╪▓ ╪з┘Ж ┘╛┘╣",
    clearChat: "┌Ж█М┘╣ ╪╡╪з┘Б ┌й╪▒█М┌║",
    welcome: "╪з┘Д╪│┘Д╪з┘Е ╪╣┘Д█М┌й┘Е! ┘Е█М┌║ ╪в┘╛ ┌й╪з AI ┌й╪з╪┤╪к┌й╪з╪▒█М ╪з╪│╪│┘╣┘Ж┘╣ █Б┘И┌║█Ф ╪в╪м ┘Е█М┌║ ╪в┘╛ ┌й█М ┌й█М╪│█Т ┘Е╪п╪п ┌й╪▒ ╪│┌й╪к╪з █Б┘И┌║╪Я"
  },
  as: {
    title: "ЁЯМ╛ ржХрзГрж╖рж┐ AI рж╕рж╣рж╛ржпрж╝ржХ",
    placeholder: "рж╢рж╕рзНржп, ржмрждрз░ ржмрж╛ ржХрзГрж╖рж┐рз░ ржкрз░рж╛ржорз░рзНрж╢ рж╕рзБржзрж┐ржм...",
    send: "ржкржарж┐ржпрж╝рж╛ржУржХ",
    typingIndicator: "рж╕рж╣рж╛ржпрж╝ржХ ржЯрж╛ржЗржк ржХрз░рж┐ ржЖржЫрзЗ...",
    voiceInput: "ржнржпрж╝рзЗржЪ ржЗржиржкрзБржЯ",
    clearChat: "ржЪрзЗржЯ ржкрз░рж┐рж╖рзНржХрж╛рз░ ржХрз░ржХ",
    welcome: "ржиржорж╕рзНржХрж╛рз░! ржоржЗ ржЖржкрзЛржирж╛рз░ AI ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХред ржЖржЬрж┐ ржоржЗ ржЖржкрзЛржирж╛ржХ ржХрзЗржирзЗржХрзИ рж╕рж╣рж╛ржпрж╝ ржХрз░рж┐ржм ржкрж╛рз░рзЛржБ?"
  },
  or: {
    title: "ЁЯМ╛ рмХрнГрм╖рм┐ AI рм╕рм╣рм╛рнЯрмХ",
    placeholder: "рмлрм╕рм▓, рмкрм╛рмгрм┐рмкрм╛рмЧ рмХрм┐рморнНрммрм╛ рмХрнГрм╖рм┐ рмЯрм┐рмкрнНрм╕ рмкрмЪрм╛рм░рмирнНрмдрнБ...",
    send: "рмкрмарм╛рмирнНрмдрнБ",
    typingIndicator: "рм╕рм╣рм╛рнЯрмХ рмЯрм╛рмЗрмкрнН рмХрм░рнБрмЫрмирнНрмдрм┐...",
    voiceInput: "рмнрмПрм╕рнН рмЗрмирмкрнБрмЯрнН",
    clearChat: "рмЪрм╛рмЯрнН рм╕рм╛рмл рмХрм░рмирнНрмдрнБ",
    welcome: "рмирморм╕рнНрмХрм╛рм░! рморнБрмБ рмЖрмкрмгрмЩрнНрмХ AI рмХрнГрм╖рм┐ рм╕рм╣рм╛рнЯрмХред рмЖрмЬрм┐ рморнБрмБ рмЖрмкрмгрмЩрнНрмХрнБ рмХрм┐рмкрм░рм┐ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рм┐рммрм┐?"
  }
};

// AI responses for different topics
const aiResponses = {
  weather: [
    "Based on the current weather patterns, I recommend checking soil moisture before planting.",
    "The upcoming weather forecast shows good conditions for sowing. Make sure to prepare your fields.",
    "Rain is expected next week. This would be perfect timing for transplanting rice seedlings."
  ],
  crops: [
    "For your soil type and climate, I suggest considering wheat cultivation this season.",
    "Crop rotation with legumes can improve soil nitrogen levels naturally.",
    "Based on market trends, tomatoes and onions are showing good profit potential this season."
  ],
  diseases: [
    "The symptoms you described sound like leaf blight. Apply copper-based fungicide immediately.",
    "Regular inspection of crops can help catch diseases early. I recommend weekly field visits.",
    "Proper drainage and air circulation can prevent many fungal diseases in crops."
  ],
  fertilizer: [
    "Your soil test indicates low nitrogen. Consider applying urea fertilizer before sowing.",
    "Organic compost is excellent for improving soil structure and nutrient content.",
    "The NPK ratio of 10:26:26 would be suitable for your crop requirements."
  ],
  general: [
    "I'm here to help with all your farming questions. Feel free to ask about crops, weather, or soil management.",
    "Sustainable farming practices can improve both yield and soil health over time.",
    "Regular soil testing is crucial for optimal crop growth and fertilizer management."
  ]
};

export function AIChatbotPage({ selectedLanguage, onNavigate, initialMessage = '', initialHistory = [] }: AIChatbotPageProps) {
  const [chatMessage, setChatMessage] = useState(initialMessage);
  const [chatHistory, setChatHistory] = useState<{role: 'user' | 'assistant', message: string, timestamp: Date}[]>(
    initialHistory.map(chat => ({ ...chat, timestamp: new Date() }))
  );
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
const inputRef = useRef<HTMLTextAreaElement>(null);

  const langCode = selectedLanguage?.code || 'en';
  const content = chatContent[langCode as keyof typeof chatContent] || chatContent.en;

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatHistory, isTyping]);

  // Send initial message if provided
  useEffect(() => {
    if (initialMessage && chatHistory.length === 0) {
      handleSendMessage();
    }
  }, []);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // Show welcome message if no chat history
  useEffect(() => {
    if (chatHistory.length === 0 && !initialMessage) {
      setChatHistory([{
        role: 'assistant',
        message: content.welcome,
        timestamp: new Date()
      }]);
    }
  }, [content.welcome]);

  const getAIResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('weather') || message.includes('rain') || message.includes('climate')) {
      return aiResponses.weather[Math.floor(Math.random() * aiResponses.weather.length)];
    } else if (message.includes('crop') || message.includes('plant') || message.includes('seed') || message.includes('harvest')) {
      return aiResponses.crops[Math.floor(Math.random() * aiResponses.crops.length)];
    } else if (message.includes('disease') || message.includes('pest') || message.includes('problem') || message.includes('sick')) {
      return aiResponses.diseases[Math.floor(Math.random() * aiResponses.diseases.length)];
    } else if (message.includes('fertilizer') || message.includes('nutrient') || message.includes('soil') || message.includes('npk')) {
      return aiResponses.fertilizer[Math.floor(Math.random() * aiResponses.fertilizer.length)];
    } else {
      return aiResponses.general[Math.floor(Math.random() * aiResponses.general.length)];
    }
  };

  const handleSendMessage = async () => {
    if (chatMessage.trim()) {
      const userMessage = chatMessage.trim();
      
      // Add user message
      const newUserMessage = {
        role: 'user' as const,
        message: userMessage,
        timestamp: new Date()
      };
      
      setChatHistory(prev => [...prev, newUserMessage]);
      setChatMessage('');
      setIsTyping(true);

      // Simulate AI thinking time
      setTimeout(() => {
        const aiResponse = getAIResponse(userMessage);
        const newAIMessage = {
          role: 'assistant' as const,
          message: aiResponse,
          timestamp: new Date()
        };
        
        setChatHistory(prev => [...prev, newAIMessage]);
        setIsTyping(false);
      }, 1000 + Math.random() * 2000); // 1-3 seconds delay
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleVoiceInput = () => {
    // Voice input placeholder
    console.log('Voice input activated');
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div className="flex flex-col h-screen bg-white">
      {/* Header with Close Button */}
      <div className="bg-green-600 text-white p-4 shadow-md flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 rounded-full overflow-hidden border-2 border-green-200">
            <ImageWithFallback
              src="https://i.pinimg.com/736x/5f/fe/c0/5ffec07ae6b545b6a22ae2a72801756e.jpg"
              alt="Farm Assistant"
              className="w-full h-full object-cover"
            />
          </div>
          <div>
            <h1 className="text-lg font-semibold">{content.title}</h1>
            <p className="text-green-200 text-sm">Online тАв Ready to help</p>
          </div>
        </div>
        
        <SimpleButton
          onClick={() => onNavigate('new-dashboard')}
          variant="ghost"
          size="icon"
          className="text-white hover:bg-green-700 rounded-full"
        >
          <X className="w-6 h-6" />
        </SimpleButton>
      </div>

      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {chatHistory.map((chat, index) => (
          <div key={index} className={`flex ${chat.role === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`flex items-end space-x-2 max-w-xs ${chat.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
              {/* Avatar */}
              <div className="w-8 h-8 rounded-full overflow-hidden flex-shrink-0">
                {chat.role === 'user' ? (
                  <div className="w-full h-full bg-green-600 flex items-center justify-center">
                    <User className="w-5 h-5 text-white" />
                  </div>
                ) : (
                  <ImageWithFallback
                    src="https://i.pinimg.com/736x/5f/fe/c0/5ffec07ae6b545b6a22ae2a72801756e.jpg"
                    alt="AI Assistant"
                    className="w-full h-full object-cover"
                  />
                )}
              </div>
              
              {/* Message Bubble */}
              <div className={`rounded-2xl px-4 py-3 ${
                chat.role === 'user' 
                  ? 'bg-green-600 text-white rounded-br-md' 
                  : 'bg-gray-100 text-gray-800 rounded-bl-md'
              }`}>
                <p className="text-sm whitespace-pre-wrap">{chat.message}</p>
                <p className={`text-xs mt-1 ${
                  chat.role === 'user' ? 'text-green-200' : 'text-gray-500'
                }`}>
                  {formatTime(chat.timestamp)}
                </p>
              </div>
            </div>
          </div>
        ))}
        
        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="flex items-end space-x-2 max-w-xs">
              <div className="w-8 h-8 rounded-full overflow-hidden flex-shrink-0">
                <ImageWithFallback
                  src="https://i.pinimg.com/736x/5f/fe/c0/5ffec07ae6b545b6a22ae2a72801756e.jpg"
                  alt="AI Assistant"
                  className="w-full h-full object-cover"
                />
              </div>
              <div className="bg-gray-100 rounded-2xl rounded-bl-md px-4 py-3">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200"></div>
                </div>
                <p className="text-xs text-gray-500 mt-1">{content.typingIndicator}</p>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="border-t border-gray-200 p-4 bg-white">
        <div className="flex items-end space-x-3">
          <div className="flex-1 relative">
            <textarea
              ref={inputRef}
              value={chatMessage}
              onChange={(e) => setChatMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={content.placeholder}
              className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none"
              rows={1}
              style={{ minHeight: '48px', maxHeight: '96px' }}
            />
            
            {/* Voice Input Button */}
            <SimpleButton
              onClick={handleVoiceInput}
              variant="ghost"
              size="icon"
              className="absolute right-2 bottom-2 w-8 h-8 text-gray-500 hover:text-green-600 hover:bg-green-50 rounded-full"
              title={content.voiceInput}
            >
              <Mic className="w-4 h-4" />
            </SimpleButton>
          </div>
          
          <SimpleButton
            onClick={handleSendMessage}
            disabled={!chatMessage.trim() || isTyping}
            className="bg-green-600 hover:bg-green-700 text-white rounded-full w-12 h-12 flex-shrink-0 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <Send className="w-5 h-5" />
          </SimpleButton>
        </div>
      </div>
    </div>
  );
}