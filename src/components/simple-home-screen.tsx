import React, { useState } from 'react';
import { User, CloudRain, TrendingUp, Wheat, Camera, Settings, MapPin, MessageCircle, Sliders, Send, Mic } from 'lucide-react';
import { Language, User as UserType, Screen } from '../App';
import { SimpleButton } from './simple-button';
import { LanguageSelector } from './language-selector';
import { ImageWithFallback } from './figma/ImageWithFallback';

interface SimpleHomeScreenProps {
  selectedLanguage: Language | null;
  user: UserType | null;
  onNavigate: (screen: Screen, chatData?: { message?: string; history?: {role: 'user' | 'assistant', message: string}[] }) => void;
  onLanguageChange: (language: Language) => void;
}

const homeContent = {
  en: {
    greeting: "Good morning",
    dashboard: "Dashboard",
    weather: "Weather",
    marketPrices: "Market Prices", 
    cropRecommendations: "Crop Recommendations",
    diseaseDetection: "Disease Detection",
    askAssistant: "Ask AI Assistant",
    chatPlaceholder: "Ask about crops, weather, or farming tips...",
    send: "Send",
    assistantTitle: "ЁЯМ╛ Farm Assistant",
    myAccount: "My Account",
    manualEntries: "Manual Entries for Crop Recommendation",
    nitrogen: "Nitrogen (N)",
    phosphorus: "Phosphorus (P)",
    potassium: "Potassium (K)",
    ph: "pH Level",
    soilMoisture: "Soil Moisture",
    menu: {
      weather: "Weather",
      marketPrices: "Market",
      crops: "Crops",
      disease: "Disease"
    }
  },
  hi: {
    greeting: "рд╕реБрдкреНрд░рднрд╛рдд",
    dashboard: "рдбреИрд╢рдмреЛрд░реНрдб",
    weather: "рдореМрд╕рдо",
    marketPrices: "рдмрд╛рдЬрд╛рд░ рдХреА рдХреАрдорддреЗрдВ",
    cropRecommendations: "рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡", 
    diseaseDetection: "рд░реЛрдЧ рдЬрд╛рдВрдЪ",
    askAssistant: "AI рд╕рд╣рд╛рдпрдХ рд╕реЗ рдкреВрдЫреЗрдВ",
    chatPlaceholder: "рдлрд╕рд▓, рдореМрд╕рдо рдпрд╛ рдЦреЗрддреА рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреВрдЫреЗрдВ...",
    send: "рднреЗрдЬреЗрдВ",
    assistantTitle: "ЁЯМ╛ рдЦреЗрддреА рд╕рд╣рд╛рдпрдХ",
    myAccount: "рдореЗрд░рд╛ рдЦрд╛рддрд╛",
    manualEntries: "рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡ рдХреЗ рд▓рд┐рдП рдореИрдиреБрдЕрд▓ рдПрдВрдЯреНрд░реА",
    nitrogen: "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (рдПрди)",
    phosphorus: "рдлрд╛рд╕реНрдлреЛрд░рд╕ (рдкреА)",
    potassium: "рдкреЛрдЯреЗрд╢рд┐рдпрдо (рдХреЗ)",
    ph: "рдкреАрдПрдЪ рд╕реНрддрд░",
    soilMoisture: "рдорд┐рдЯреНрдЯреА рдХреА рдирдореА",
    menu: {
      weather: "рдореМрд╕рдо",
      marketPrices: "рдмрд╛рдЬрд╛рд░",
      crops: "рдлрд╕рд▓",
      disease: "рд░реЛрдЧ"
    }
  },
  ta: {
    greeting: "роХро╛ро▓рпИ ро╡рогроХрпНроХроорпН",
    dashboard: "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
    weather: "ро╡ро╛ройро┐ро▓рпИ",
    marketPrices: "роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН",
    cropRecommendations: "рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
    diseaseDetection: "роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН",
    askAssistant: "AI роЙродро╡ро┐ропро╛ро│ро░ро┐роЯроорпН роХрпЗро│рпБроЩрпНроХро│рпН",
    chatPlaceholder: "рокропро┐ро░рпН, ро╡ро╛ройро┐ро▓рпИ роЕро▓рпНро▓родрпБ ро╡ро┐ро╡роЪро╛роп роХрпБро▒ро┐рокрпНрокрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роХрпЗро│рпБроЩрпНроХро│рпН...",
    send: "роЕройрпБрокрпНрокрпБ",
    assistantTitle: "ЁЯМ╛ ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН",
    myAccount: "роОройрпН роХрогроХрпНроХрпБ",
    manualEntries: "рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХрпНроХро╛рой роХрпИроорпБро▒рпИ рокродро┐ро╡рпБроХро│рпН",
    nitrogen: "роирпИроЯрпНро░роЬройрпН (роОройрпН)",
    phosphorus: "рокро╛ро╕рпНрокро░ро╕рпН (рокро┐)",
    potassium: "рокрпКроЯрпНроЯро╛роЪро┐ропроорпН (роХрпЗ)",
    ph: "рокро┐роОроЪрпН роЕро│ро╡рпБ",
    soilMoisture: "роорогрпН роИро░рокрпНрокродроорпН",
    menu: {
      weather: "ро╡ро╛ройро┐ро▓рпИ",
      marketPrices: "роЪроирпНродрпИ",
      crops: "рокропро┐ро░рпН",
      disease: "роирпЛропрпН"
    }
  },
  te: {
    greeting: "р░╢р▒Бр░нр▒Лр░жр░пр░В", 
    dashboard: "р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н",
    weather: "р░╡р░╛р░др░╛р░╡р░░р░гр░В",
    marketPrices: "р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б",
    cropRecommendations: "р░кр░Вр░Я р░╕р▒Вр░Ър░ир░▓р▒Б",
    diseaseDetection: "р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
    askAssistant: "AI р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒НтАМр░ир░┐ р░Ер░бр░Чр░Вр░бр░┐",
    chatPlaceholder: "р░кр░Вр░Яр░▓р▒Б, р░╡р░╛р░др░╛р░╡р░░р░гр░В р░▓р▒Зр░жр░╛ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ър░┐р░Яр▒Нр░Хр░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ер░бр░Чр░Вр░бр░┐...",
    send: "р░кр░Вр░кр▒Б",
    assistantTitle: "ЁЯМ╛ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н",
    myAccount: "р░ир░╛ р░Цр░╛р░др░╛",
    manualEntries: "р░кр░Вр░Я р░╕р▒Вр░Ър░ир░▓ р░Хр▒Лр░╕р░В р░ор░╛р░ир▒Нр░пр▒Бр░╡р░▓р▒Н р░Ор░Вр░Яр▒Нр░░р▒Ар░▓р▒Б",
    nitrogen: "р░ир▒Ир░Яр▒Нр░░р▒Лр░Ьр░ир▒Н (р░Ор░ир▒Н)",
    phosphorus: "р░лр░╛р░╕р▒Нр░лр░░р░╕р▒Н (р░кр░┐)",
    potassium: "р░кр▒Кр░Яр░╛р░╖р░┐р░пр░ор▒Н (р░Хр▒Ж)",
    ph: "р░кр░┐р░╣р▒Жр░Ър▒Н р░╕р▒Нр░ер░╛р░пр░┐",
    soilMoisture: "р░ор░Яр▒Нр░Яр░┐ р░др▒Зр░о",
    menu: {
      weather: "р░╡р░╛р░др░╛р░╡р░░р░гр░В",
      marketPrices: "р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н",
      crops: "р░кр░Вр░Яр░▓р▒Б",
      disease: "р░╡р▒Нр░пр░╛р░зр░┐"
    }
  },
  bn: {
    greeting: "рж╕рзБржкрзНрж░ржнрж╛ржд",
    dashboard: "ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб",
    weather: "ржЖржмрж╣рж╛ржУржпрж╝рж╛",
    marketPrices: "ржмрж╛ржЬрж╛рж░рзЗрж░ ржжрж╛ржо",
    cropRecommendations: "ржлрж╕рж▓рзЗрж░ рж╕рзБржкрж╛рж░рж┐рж╢",
    diseaseDetection: "рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝",
    askAssistant: "AI рж╕рж╣рж╛ржпрж╝ржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи",
    chatPlaceholder: "ржлрж╕рж▓, ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржмрж╛ ржХрзГрж╖рж┐ ржЯрж┐ржкрж╕ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи...",
    send: "ржкрж╛ржарж╛ржи",
    assistantTitle: "ЁЯМ╛ ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХ",
    myAccount: "ржЖржорж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ",
    manualEntries: "ржлрж╕рж▓рзЗрж░ рж╕рзБржкрж╛рж░рж┐рж╢рзЗрж░ ржЬржирзНржп ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓ ржПржирзНржЯрзНрж░рж┐",
    nitrogen: "ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи (ржПржи)",
    phosphorus: "ржлрж╕ржлрж░рж╛рж╕ (ржкрж┐)",
    potassium: "ржкржЯрж╛рж╕рж┐ржпрж╝рж╛ржо (ржХрзЗ)",
    ph: "ржкрж┐ржПржЗржЪ рж╕рзНрждрж░", 
    soilMoisture: "ржорж╛ржЯрж┐рж░ ржЖрж░рзНржжрзНрж░рждрж╛",
    menu: {
      weather: "ржЖржмрж╣рж╛ржУржпрж╝рж╛",
      marketPrices: "ржмрж╛ржЬрж╛рж░",
      crops: "ржлрж╕рж▓",
      disease: "рж░рзЛржЧ"
    }
  },
  mr: {
    greeting: "рд╕реБрдкреНрд░рднрд╛рдд",
    dashboard: "рдбреЕрд╢рдмреЛрд░реНрдб",
    weather: "рд╣рд╡рд╛рдорд╛рди",
    marketPrices: "рдмрд╛рдЬрд╛рд░рднрд╛рд╡",
    cropRecommendations: "рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╢реА",
    diseaseDetection: "рд░реЛрдЧ рдирд┐рджрд╛рди", 
    askAssistant: "AI рд╕рд╣рд╛рдпреНрдпрдХрд╛рд▓рд╛ рд╡рд┐рдЪрд╛рд░рд╛",
    chatPlaceholder: "рдкреАрдХ, рд╣рд╡рд╛рдорд╛рди рдХрд┐рдВрд╡рд╛ рд╢реЗрддреАрдЪреНрдпрд╛ рдЯрд┐рдкреНрд╕ рд╡рд┐рд╢реЗрд╖ рд╡рд┐рдЪрд╛рд░рд╛...",
    send: "рдкрд╛рдард╡рд╛",
    assistantTitle: "ЁЯМ╛ рд╢реЗрддреА рд╕рд╣рд╛рдпреНрдпрдХ",
    myAccount: "рдорд╛рдЭреЗ рдЦрд╛рддреЗ",
    manualEntries: "рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╢реАрд╕рд╛рдареА рдореЕрдиреНрдпреБрдЕрд▓ рдПрдВрдЯреНрд░реА",
    nitrogen: "рдирд╛рдпрдЯреНрд░реЛрдЬрди (рдПрди)",
    phosphorus: "рдлреЙрд╕реНрдлрд░рд╕ (рдкреА)",
    potassium: "рдкреЛрдЯреЕрд╢рд┐рдпрдо (рдХреЗ)",
    ph: "рдкреАрдПрдЪ рдкрд╛рддрд│реА",
    soilMoisture: "рдорд╛рддреАрдЪреА рдУрд▓рд╛рд╡рд╛",
    menu: {
      weather: "рд╣рд╡рд╛рдорд╛рди",
      marketPrices: "рдмрд╛рдЬрд╛рд░",
      crops: "рдкреАрдХ",
      disease: "рд░реЛрдЧ"
    }
  },
  gu: {
    greeting: "рк╕рлБрккрлНрк░ркнрк╛ркд",
    dashboard: "ркбрлЗрк╢ркмрлЛрк░рлНркб",
    weather: "рк╣рк╡рк╛ркорк╛рки",
    marketPrices: "ркмркЬрк╛рк░ ркнрк╛рк╡",
    cropRecommendations: "рккрк╛ркХркирлА ркнрк▓рк╛ркоркгрлЛ",
    diseaseDetection: "рк░рлЛркЧ ркирк┐ркжрк╛рки",
    askAssistant: "AI рк╕рк╣рк╛ркпркХркирлЗ рккрлВркЫрлЛ",
    chatPlaceholder: "рккрк╛ркХ, рк╣рк╡рк╛ркорк╛рки ркЕркерк╡рк╛ ркЦрлЗркдрлАркирлА ркЯрк┐рккрлНрк╕ рк╡рк┐рк╢рлЗ рккрлВркЫрлЛ...",
    send: "ркорлЛркХрк▓рлЛ",
    assistantTitle: "ЁЯМ╛ ркЦрлЗркдрлА рк╕рк╣рк╛ркпркХ",
    myAccount: "ркорк╛рк░рлБркВ ркЦрк╛ркдрлБркВ",
    manualEntries: "рккрк╛ркХркирлА ркнрк▓рк╛ркоркгрлЛ ркорк╛ркЯрлЗ ркорлЗркирлНркпрлБркЕрк▓ ркПркирлНркЯрлНрк░рлА",
    nitrogen: "ркирк╛ркЗркЯрлНрк░рлЛркЬрки (ркПрки)",
    phosphorus: "рклрлЛрк╕рлНрклрк░рк╕ (рккрлА)",
    potassium: "рккрлЛркЯрлЗрк╢рк┐ркпрко (ркХрлЗ)",
    ph: "рккрлАркПркЪ рк╕рлНркдрк░",
    soilMoisture: "ркорк╛ркЯрлАркирлА ркнрлАркирк╛рк╢",
    menu: {
      weather: "рк╣рк╡рк╛ркорк╛рки",
      marketPrices: "ркмркЬрк╛рк░", 
      crops: "рккрк╛ркХ",
      disease: "рк░рлЛркЧ"
    }
  },
  kn: {
    greeting: "р▓╢р│Бр▓нр│Лр▓жр▓п",
    dashboard: "р▓бр│Нр▓пр▓╛р▓╢р│НтАМр▓мр│Лр▓░р│Нр▓бр│Н",
    weather: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и",
    marketPrices: "р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж р▓мр│Жр▓▓р│Жр▓Чр▓│р│Б",
    cropRecommendations: "р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б",
    diseaseDetection: "р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж",
    askAssistant: "AI р▓╕р▓╣р▓╛р▓пр▓Хр▓ир▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐",
    chatPlaceholder: "р▓мр│Жр▓│р│Жр▓Чр▓│р│Б, р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Ер▓ер▓╡р▓╛ р▓Хр│Гр▓╖р▓┐ р▓╕р▓▓р▓╣р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐...",
    send: "р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓┐",
    assistantTitle: "ЁЯМ╛ р▓Хр│Гр▓╖р▓┐ р▓╕р▓╣р▓╛р▓пр▓Х",
    myAccount: "р▓ир▓ир│Нр▓и р▓Цр▓╛р▓др│Ж",
    manualEntries: "р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓ор│Нр▓пр▓╛р▓ир│Бр▓╡р│Зр▓▓р│Н р▓Ор▓Вр▓Яр│Нр▓░р▓┐р▓Чр▓│р│Б",
    nitrogen: "р▓ир│Ир▓Яр│Нр▓░р│Лр▓Ьр▓ир│Н (р▓Ор▓ир│Н)",
    phosphorus: "р▓лр▓╛р▓╕р│Нр▓лр▓░р▓╕р│Н (р▓кр▓┐)",
    potassium: "р▓кр│Кр▓Яр│Нр▓пр▓╛р▓╕р▓┐р▓пр▓ор│Н (р▓Хр│Ж)",
    ph: "р▓кр▓┐р▓╣р│Жр▓Ър│Н р▓ор▓Яр│Нр▓Я",
    soilMoisture: "р▓ор▓гр│Нр▓гр▓┐р▓и р▓др│Зр▓╡р▓╛р▓Вр▓╢",
    menu: {
      weather: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и",
      marketPrices: "р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж",
      crops: "р▓мр│Жр▓│р│Ж", 
      disease: "р▓░р│Лр▓Ч"
    }
  },
  ml: {
    greeting: "р┤╕р╡Бр┤кр╡Нр┤░р┤нр┤╛р┤др┤В",
    dashboard: "р┤бр┤╛р┤╖р╡НтАМр┤мр╡Лр╡╝р┤бр╡Н",
    weather: "р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е",
    marketPrices: "р┤ор┤╛р╡╝р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Н р┤╡р┤┐р┤▓р┤Хр╡╛",
    cropRecommendations: "р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛",
    diseaseDetection: "р┤░р╡Лр┤Ч р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡╜",
    askAssistant: "AI р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р┤┐р┤ир╡Лр┤Яр╡Н р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
    chatPlaceholder: "р┤╡р┤┐р┤│р┤Хр╡╛, р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤Хр╡Гр┤╖р┤┐ р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...",
    send: "р┤Ер┤пр┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х",
    assistantTitle: "ЁЯМ╛ р┤Хр╡Гр┤╖р┤┐ р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р╡Н",
    myAccount: "р┤Ор┤ир╡Нр┤▒р╡Ж р┤Ер┤Хр╡Нр┤Хр╡Чр┤гр╡Нр┤Яр╡Н",
    manualEntries: "р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤│р╡Нр┤│ р┤ор┤╛р┤ир╡Бр┤╡р╡╜ р┤Ор╡╗р┤Яр╡Нр┤░р┤┐р┤Хр╡╛",
    nitrogen: "р┤ир╡Ир┤Яр╡Нр┤░р┤Ьр╡╗ (р┤Ор╡╗)",
    phosphorus: "р┤лр╡Лр┤╕р╡Нр┤лр┤▒р┤╕р╡Н (р┤кр┤┐)",
    potassium: "р┤кр╡Кр┤Яр╡Нр┤Яр┤╛р┤╕р┤┐р┤пр┤В (р┤Хр╡Ж)",
    ph: "р┤кр┤┐р┤Ор┤Ър╡Нр┤Ър╡Н р┤▓р╡Жр┤╡р╡╜",
    soilMoisture: "р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Ж р┤Ир╡╝р┤кр╡Нр┤кр┤В",
    menu: {
      weather: "р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е",
      marketPrices: "р┤ор┤╛р╡╝р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Н",
      crops: "р┤╡р┤┐р┤│р┤Хр╡╛",
      disease: "р┤░р╡Лр┤Чр┤В"
    }
  },
  pa: {
    greeting: "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓",
    dashboard: "рибрйИри╕ри╝римрйЛри░риб",
    weather: "риорйМри╕рио",
    marketPrices: "риори╛ри░риХри┐риЯ ринри╛риЕ",
    cropRecommendations: "рилри╕ри▓ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ",
    diseaseDetection: "ри░рйЛриЧ рикриЫри╛риг",
    askAssistant: "AI риЕри╕ри┐ри╕рйИриВриЯ риирйВрй░ рикрйБрй▒риЫрйЛ",
    chatPlaceholder: "рилри╕ри▓ри╛риВ, риорйМри╕рио риЬри╛риВ риЦрйЗридрйА рижрйЗ риирйБри╕риЦри┐риЖриВ римри╛ри░рйЗ рикрйБрй▒риЫрйЛ...",
    send: "ринрйЗриЬрйЛ",
    assistantTitle: "ЁЯМ╛ риЦрйЗридрйА ри╕ри╣ри╛риЗриХ",
    myAccount: "риорйЗри░ри╛ риЦри╛ридри╛",
    manualEntries: "рилри╕ри▓ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ ри▓риИ риорйИриирйВриЕри▓ риРриВриЯри░рйАриЖриВ",
    nitrogen: "риири╛риИриЯрйНри░рйЛриЬрии (риРрии)",
    phosphorus: "рилри╛ри╕рилрйЛри░ри╕ (рикрйА)",
    potassium: "рикрйЛриЯри╛ри╕ри╝рйАриЕрио (риХрйЗ)",
    ph: "рикрйАриРриЪ рикрй▒ризри░",
    soilMoisture: "риори┐рй▒риЯрйА рижрйА риириорйА",
    menu: {
      weather: "риорйМри╕рио",
      marketPrices: "риори╛ри░риХри┐риЯ",
      crops: "рилри╕ри▓",
      disease: "ри░рйЛриЧ"
    }
  },
  ur: {
    greeting: "╪╡╪и╪н ╪и╪о█М╪▒",
    dashboard: "┌И█М╪┤ ╪и┘И╪▒┌И",
    weather: "┘Е┘И╪│┘Е",
    marketPrices: "┘Е╪з╪▒┌й█М┘╣ ┌й█М ┘В█М┘Е╪к█М┌║",
    cropRecommendations: "┘Б╪╡┘Д ┌й█М ╪│┘Б╪з╪▒╪┤╪з╪к",
    diseaseDetection: "╪и█М┘Е╪з╪▒█М ┌й█М ╪к╪┤╪о█М╪╡",
    askAssistant: "AI ╪з╪│╪│┘╣┘Ж┘╣ ╪│█Т ┘╛┘И┌Ж┌╛█М┌║",
    chatPlaceholder: "┘Б╪╡┘Д┘И┌║╪М ┘Е┘И╪│┘Е █М╪з ┌й╪з╪┤╪к┌й╪з╪▒█М ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┘╛┘И┌Ж┌╛█М┌║...",
    send: "╪и┌╛█М╪м█М┌║",
    assistantTitle: "ЁЯМ╛ ┌й╪з╪┤╪к┌й╪з╪▒█М ╪з╪│╪│┘╣┘Ж┘╣",
    myAccount: "┘Е█М╪▒╪з ╪з┌й╪з╪д┘Ж┘╣",
    manualEntries: "┘Б╪╡┘Д ┌й█М ╪│┘Б╪з╪▒╪┤╪з╪к ┌й█Т ┘Д█М█Т ╪п╪│╪к█М ╪з┘Ж╪п╪▒╪з╪м╪з╪к",
    nitrogen: "┘Ж╪з╪ж┘╣╪▒┘И╪м┘Ж (╪з█М┘Ж)",
    phosphorus: "┘Б╪з╪│┘Б┘И╪▒╪│ (┘╛█М)",
    potassium: "┘╛┘И┘╣╪з╪┤█М┘Е (┌й█Т)",
    ph: "┘╛█М ╪з█М┌Ж ┘Д█М┘И┘Д",
    soilMoisture: "┘Е┘╣█М ┌й█М ┘Ж┘Е█М",
    menu: {
      weather: "┘Е┘И╪│┘Е",
      marketPrices: "┘Е╪з╪▒┌й█М┘╣",
      crops: "┘Б╪╡┘Д",
      disease: "╪и█М┘Е╪з╪▒█М"
    }
  },
  as: {
    greeting: "рж╢рзБржн ржкрзНрз░ржнрж╛ржд",
    dashboard: "ржбрзЗржЪржм'рз░рзНржб",
    weather: "ржмрждрз░",
    marketPrices: "ржмржЬрж╛рз░рз░ ржжрж╛ржо",
    cropRecommendations: "рж╢рж╕рзНржпрз░ ржкрз░рж╛ржорз░рзНрж╢",
    diseaseDetection: "рз░рзЛржЧ ржЪрж┐ржирж╛ржХрзНрждржХрз░ржг",
    askAssistant: "AI рж╕рж╣рж╛ржпрж╝ржХржХ рж╕рзБржзрж┐ржм",
    chatPlaceholder: "рж╢рж╕рзНржп, ржмрждрз░ ржмрж╛ ржХрзГрж╖рж┐рз░ ржкрз░рж╛ржорз░рзНрж╢ рж╕рзБржзрж┐ржм...",
    send: "ржкржарж┐ржпрж╝рж╛ржУржХ",
    assistantTitle: "ЁЯМ╛ ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХ",
    myAccount: "ржорзЛрз░ ржПржХрж╛ржЙржгрзНржЯ",
    manualEntries: "рж╢рж╕рзНржпрз░ ржкрз░рж╛ржорз░рзНрж╢рз░ ржмрж╛ржмрзЗ ржорзЗржирзБрз▒рзЗрж▓ ржПржгрзНржЯрзНрз░рж┐",
    nitrogen: "ржирж╛ржЗржЯрзНрз░'ржЬрзЗржи (ржПржи)",
    phosphorus: "ржлржЫржлрз░рж╛ржЫ (ржкрж┐)",
    potassium: "ржкржЯрж╛ржЫрж┐ржпрж╝рж╛ржо (ржХрзЗ)",
    ph: "ржкрж┐ржПржЗржЪ рж╕рзНрждрз░",
    soilMoisture: "ржорж╛ржЯрж┐рз░ ржЖрз░рзНржжрзНрз░рждрж╛",
    menu: {
      weather: "ржмрждрз░", 
      marketPrices: "ржмржЬрж╛рз░",
      crops: "рж╢рж╕рзНржп",
      disease: "рз░рзЛржЧ"
    }
  },
  or: {
    greeting: "рм╢рнБрмн рмкрнНрм░рмнрм╛рмд",
    dashboard: "рмбрм╛рм╕рммрнЛрм░рнНрмб",
    weather: "рмкрм╛рмгрм┐рмкрм╛рмЧ",
    marketPrices: "рммрмЬрм╛рм░ рморнВрм▓рнЯ",
    cropRecommendations: "рмлрм╕рм▓ рм╕рнБрмкрм╛рм░рм┐рм╢",
    diseaseDetection: "рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ",
    askAssistant: "AI рм╕рм╣рм╛рнЯрмХрмЩрнНрмХрнБ рмкрмЪрм╛рм░рмирнНрмдрнБ",
    chatPlaceholder: "рмлрм╕рм▓, рмкрм╛рмгрм┐рмкрм╛рмЧ рмХрм┐рморнНрммрм╛ рмХрнГрм╖рм┐ рмЯрм┐рмкрнНрм╕ рмкрмЪрм╛рм░рмирнНрмдрнБ...",
    send: "рмкрмарм╛рмирнНрмдрнБ",
    assistantTitle: "ЁЯМ╛ рмХрнГрм╖рм┐ рм╕рм╣рм╛рнЯрмХ",
    myAccount: "рморнЛ рмЖрмХрм╛рмЙрмгрнНрмЯ",
    manualEntries: "рмлрм╕рм▓ рм╕рнБрмкрм╛рм░рм┐рм╢ рмкрм╛рмЗрмБ рморм╛рмирнБрмЖрм▓ рмПрмгрнНрмЯрнНрм░рм┐",
    nitrogen: "рмирм╛рмЗрмЯрнНрм░рнЛрмЬрнЗрми (рмПрми)",
    phosphorus: "рмлрм╕рмлрм░рм╕ (рмкя┐╜я┐╜)",
    potassium: "рмкрнЛрмЯрм╛рм╕рм┐рнЯрмо (рмХрнЗ)",
    ph: "рмкрм┐рмПрмЪ рм╕рнНрмдрм░",
    soilMoisture: "рморм╛рмЯрм┐рм░ рмЖрм░рнНрмжрнНрм░рмдрм╛",
    menu: {
      weather: "рмкрм╛рмгрм┐рмкрм╛рмЧ",
      marketPrices: "рммрмЬрм╛рм░",
      crops: "рмлрм╕рм▓",
      disease: "рм░рнЛрмЧ"
    }
  }
};

export function SimpleHomeScreen({ selectedLanguage, user, onNavigate, onLanguageChange }: SimpleHomeScreenProps) {
  const [chatMessage, setChatMessage] = useState('');
  const [chatHistory, setChatHistory] = useState<{role: 'user' | 'assistant', message: string}[]>([]);
  
  const langCode = selectedLanguage?.code || 'en';
  const content = homeContent[langCode as keyof typeof homeContent] || homeContent.en;

  const handleSendMessage = () => {
    if (chatMessage.trim()) {
      // Navigate to dedicated AI chatbot page with the message and history
      onNavigate('ai-chatbot', {
        message: chatMessage,
        history: chatHistory
      });
      
      // Clear local state since we're moving to the dedicated chatbot page
      setChatMessage('');
      setChatHistory([]);
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-b from-green-50 to-white">
      {/* Header - Fixed */}
      <div className="bg-green-600 text-white p-6 sticky top-0 z-10 shadow-md">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center">
              <User className="w-6 h-6 text-green-600" />
            </div>
            <div>
              <p className="text-green-100 text-sm">{content.greeting}</p>
              <h1 className="text-xl font-bold">{user?.name || 'Farmer'}</h1>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <LanguageSelector
              selectedLanguage={selectedLanguage}
              onLanguageChange={onLanguageChange}
              variant="header"
            />
            <SimpleButton
              onClick={() => onNavigate('settings')}
              variant="ghost"
              size="icon"
              className="text-white hover:bg-green-700"
            >
              <Settings className="w-5 h-5" />
            </SimpleButton>
          </div>
        </div>
        
        <div className="flex items-center text-green-100 text-sm">
          <MapPin className="w-4 h-4 mr-1" />
          <span>{user?.location || selectedLanguage?.name || 'Location not set'}</span>
        </div>
      </div>

      {/* Scrollable Main Content */}
      <div className="flex-1 overflow-y-auto pb-24">
        <div className="p-6 space-y-6">
          <h2 className="text-2xl font-bold text-gray-800">{content.dashboard}</h2>
          
          {/* 6-Card Grid */}
          <div className="grid grid-cols-2 gap-4">
            {/* Weather */}
            <SimpleButton
              onClick={() => onNavigate('weather-forecast')}
              variant="outline"
              className="h-32 flex flex-col items-center justify-center space-y-3 bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200 hover:from-blue-100 hover:to-blue-150"
            >
              <CloudRain className="w-8 h-8 text-blue-600" />
              <span className="text-sm font-medium text-blue-800">{content.weather}</span>
            </SimpleButton>

            {/* Market Prices */}
            <SimpleButton
              onClick={() => onNavigate('market-prices')}
              variant="outline"
              className="h-32 flex flex-col items-center justify-center space-y-3 bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200 hover:from-orange-100 hover:to-orange-150"
            >
              <TrendingUp className="w-8 h-8 text-orange-600" />
              <span className="text-sm font-medium text-orange-800">{content.marketPrices}</span>
            </SimpleButton>

            {/* Crop Recommendations */}
            <SimpleButton
              onClick={() => onNavigate('crop-details')}
              variant="outline"
              className="h-32 flex flex-col items-center justify-center space-y-3 bg-gradient-to-br from-green-50 to-green-100 border-green-200 hover:from-green-100 hover:to-green-150"
            >
              <Wheat className="w-8 h-8 text-green-600" />
              <span className="text-sm font-medium text-green-800">{content.cropRecommendations}</span>
            </SimpleButton>

            {/* Disease Detection */}
            <SimpleButton
              onClick={() => onNavigate('disease-detection')}
              variant="outline"
              className="h-32 flex flex-col items-center justify-center space-y-3 bg-gradient-to-br from-red-50 to-red-100 border-red-200 hover:from-red-100 hover:to-red-150"
            >
              <Camera className="w-8 h-8 text-red-600" />
              <span className="text-sm font-medium text-red-800">{content.diseaseDetection}</span>
            </SimpleButton>

            {/* Manual Entries */}
            <SimpleButton
              onClick={() => onNavigate('manual-entries')}
              variant="outline"
              className="h-32 flex flex-col items-center justify-center space-y-3 bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200 hover:from-purple-100 hover:to-purple-150"
            >
              <Sliders className="w-8 h-8 text-purple-600" />
              <span className="text-sm font-medium text-purple-800">{content.manualEntries}</span>
            </SimpleButton>

            {/* My Account */}
            <SimpleButton
              onClick={() => onNavigate('my-account')}
              variant="outline"
              className="h-32 flex flex-col items-center justify-center space-y-3 bg-gradient-to-br from-teal-50 to-teal-100 border-teal-200 hover:from-teal-100 hover:to-teal-150"
            >
              <User className="w-8 h-8 text-teal-600" />
              <span className="text-sm font-medium text-teal-800">{content.myAccount}</span>
            </SimpleButton>
          </div>

          {/* Chat History */}
          {chatHistory.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-800">{content.assistantTitle}</h3>
              <div className="space-y-3 max-h-60 overflow-y-auto">
                {chatHistory.map((chat, index) => (
                  <div key={index} className={`flex ${chat.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-xs rounded-lg p-3 ${
                      chat.role === 'user' 
                        ? 'bg-green-600 text-white' 
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      <p className="text-sm">{chat.message}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Fixed Chatbot at Bottom */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 shadow-lg max-w-md mx-auto">
        <div className="flex items-center space-x-3">
          {/* Farm Assistant Avatar */}
          <div className="flex-shrink-0">
            <div className="w-12 h-12 rounded-full overflow-hidden border-2 border-green-200">
              <ImageWithFallback
                src="https://i.pinimg.com/736x/5f/fe/c0/5ffec07ae6b545b6a22ae2a72801756e.jpg"
                alt="Farm Assistant"
                className="w-full h-full object-cover"
              />
            </div>
          </div>
          
          <div className="flex-1 relative">
            <input
              type="text"
              value={chatMessage}
              onChange={(e) => setChatMessage(e.target.value)}
              placeholder={content.chatPlaceholder}
              className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            />
            {/* Microphone Button */}
            <SimpleButton
              onClick={() => {
                // Mic functionality placeholder
                console.log('Voice input activated');
              }}
              variant="ghost"
              size="icon"
              className="absolute right-2 top-1/2 transform -translate-y-1/2 w-8 h-8 text-gray-500 hover:text-green-600 hover:bg-green-50"
            >
              <Mic className="w-4 h-4" />
            </SimpleButton>
          </div>
          
          <SimpleButton
            onClick={handleSendMessage}
            variant="default"
            size="icon"
            className="bg-green-600 hover:bg-green-700 text-white rounded-full w-12 h-12 flex-shrink-0"
          >
            <Send className="w-5 h-5" />
          </SimpleButton>
        </div>
      </div>
    </div>
  );
}